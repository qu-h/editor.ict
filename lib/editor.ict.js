/**
 * DO NOT EDIT THIS FILE
 * The code in this file is generated from files in ./src/
 */

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.editormd = factory());
}(this, (function () { 'use strict';

    var classPrefix = 'editormd-';
    var titleDefault = 'Editor.md';
    var settingDefault = {
      mode: "gfm",
      //gfm or markdown
      name: "",
      // Form element name
      value: "",
      // value for CodeMirror, if mode not gfm/markdown
      theme: "",
      // Editor.md self themes, before v1.5.0 is CodeMirror theme, default empty
      editorTheme: "default",
      // Editor area, this is CodeMirror theme at v1.5.0
      previewTheme: "",
      // Preview area theme, default empty
      markdown: "",
      // Markdown source code
      appendMarkdown: "",
      // if in init textarea value not empty, append markdown to textarea
      width: "100%",
      height: "100%",
      path: "./lib/",
      // Dependents module file directory
      pluginPath: "",
      // If this empty, default use settings.path + "../plugins/"
      delay: 300,
      // Delay parse markdown to html, Uint : ms
      autoLoadModules: true,
      // Automatic load dependent module files
      watch: true,
      placeholder: "Enjoy Markdown! coding now...",
      gotoLine: true,
      codeFold: false,
      autoHeight: false,
      autoFocus: true,
      autoCloseTags: true,
      searchReplace: true,
      syncScrolling: true,
      // true | false | "single", default true
      readOnly: false,
      tabSize: 4,
      indentUnit: 4,
      lineNumbers: true,
      lineWrapping: true,
      autoCloseBrackets: true,
      showTrailingSpace: true,
      matchBrackets: true,
      indentWithTabs: true,
      styleSelectedText: true,
      matchWordHighlight: true,
      // options: true, false, "onselected"
      styleActiveLine: true,
      // Highlight the current line
      dialogLockScreen: true,
      dialogShowMask: true,
      dialogDraggable: true,
      dialogMaskBgColor: "#fff",
      dialogMaskOpacity: 0.1,
      fontSize: "13px",
      saveHTMLToTextarea: false,
      disabledKeyMaps: [],
      onload: function onload() {},
      onresize: function onresize() {},
      onchange: function onchange() {},
      onwatch: null,
      onunwatch: null,
      onpreviewing: function onpreviewing() {},
      onpreviewed: function onpreviewed() {},
      onfullscreen: function onfullscreen() {},
      onfullscreenExit: function onfullscreenExit() {},
      onscroll: function onscroll() {},
      onpreviewscroll: function onpreviewscroll() {},
      imageUpload: false,
      imageFormats: ["jpg", "jpeg", "gif", "png", "bmp", "webp"],
      imageUploadURL: "",
      crossDomainUpload: false,
      uploadCallbackURL: "",
      toc: true,
      // Table of contents
      tocm: false,
      // Using [TOCM], auto create ToC dropdown menu
      tocTitle: "",
      // for ToC dropdown menu btn
      tocDropdown: false,
      tocContainer: "",
      tocStartLevel: 1,
      // Said from H1 to create ToC
      htmlDecode: false,
      // Open the HTML tag identification 
      pageBreak: true,
      // Enable parse page break [========]
      atLink: true,
      // for @link
      emailLink: true,
      // for email address auto link
      taskList: false,
      // Enable Github Flavored Markdown task lists
      emoji: false,
      // :emoji: , Support Github emoji, Twitter Emoji (Twemoji);
      // Support FontAwesome icon emoji :fa-xxx: > Using fontAwesome icon web fonts;
      // Support Editor.md logo icon emoji :editormd-logo: :editormd-logo-1x: > 1~8x;
      tex: false,
      // TeX(LaTeX), based on KaTeX
      flowChart: false,
      // flowChart.js only support IE9+
      sequenceDiagram: false,
      // sequenceDiagram.js only support IE9+
      previewCodeHighlight: true,
      toolbar: true,
      // show/hide toolbar
      toolbarAutoFixed: true,
      // on window scroll auto fixed position
      toolbarIcons: "full",
      toolbarTitles: {},
      toolbarHandlers: {
        ucwords: function ucwords() {
          return editormd.toolbarHandlers.ucwords;
        },
        lowercase: function lowercase() {
          return editormd.toolbarHandlers.lowercase;
        }
      },
      toolbarCustomIcons: {
        // using html tag create toolbar icon, unused default <a> tag.
        lowercase: "<a href=\"javascript:;\" title=\"Lowercase\" unselectable=\"on\"><i class=\"fa\" name=\"lowercase\" style=\"font-size:24px;margin-top: -10px;\">a</i></a>",
        "ucwords": "<a href=\"javascript:;\" title=\"ucwords\" unselectable=\"on\"><i class=\"fa\" name=\"ucwords\" style=\"font-size:20px;margin-top: -3px;\">Aa</i></a>"
      },
      toolbarIconsClass: {
        undo: "fa-undo",
        redo: "fa-repeat",
        bold: "fa-bold",
        del: "fa-strikethrough",
        italic: "fa-italic",
        quote: "fa-quote-left",
        uppercase: "fa-font",
        h1: classPrefix + "bold",
        h2: classPrefix + "bold",
        h3: classPrefix + "bold",
        h4: classPrefix + "bold",
        h5: classPrefix + "bold",
        h6: classPrefix + "bold",
        "list-ul": "fa-list-ul",
        "list-ol": "fa-list-ol",
        hr: "fa-minus",
        link: "fa-link",
        "reference-link": "fa-anchor",
        image: "fa-picture-o",
        code: "fa-code",
        "preformatted-text": "fa-file-code-o",
        "code-block": "fa-file-code-o",
        table: "fa-table",
        datetime: "fa-clock-o",
        emoji: "fa-smile-o",
        "html-entities": "fa-copyright",
        pagebreak: "fa-newspaper-o",
        "goto-line": "fa-terminal",
        // fa-crosshairs
        watch: "fa-eye-slash",
        unwatch: "fa-eye",
        preview: "fa-desktop",
        search: "fa-search",
        fullscreen: "fa-arrows-alt",
        clear: "fa-eraser",
        help: "fa-question-circle",
        info: "fa-info-circle"
      },
      toolbarIconTexts: {},
      lang: {
        name: "zh-cn",
        description: "开源在线Markdown编辑器<br/>Open source online Markdown editor.",
        tocTitle: "目录",
        toolbar: {
          undo: "撤销（Ctrl+Z）",
          redo: "重做（Ctrl+Y）",
          bold: "粗体",
          del: "删除线",
          italic: "斜体",
          quote: "引用",
          ucwords: "将每个单词首字母转成大写",
          uppercase: "将所选转换成大写",
          lowercase: "将所选转换成小写",
          h1: "标题1",
          h2: "标题2",
          h3: "标题3",
          h4: "标题4",
          h5: "标题5",
          h6: "标题6",
          "list-ul": "无序列表",
          "list-ol": "有序列表",
          hr: "横线",
          link: "链接",
          "reference-link": "引用链接",
          image: "添加图片",
          code: "行内代码",
          "preformatted-text": "预格式文本 / 代码块（缩进风格）",
          "code-block": "代码块（多语言风格）",
          table: "添加表格",
          datetime: "日期时间",
          emoji: "Emoji表情",
          "html-entities": "HTML实体字符",
          pagebreak: "插入分页符",
          "goto-line": "跳转到行",
          watch: "关闭实时预览",
          unwatch: "开启实时预览",
          preview: "全窗口预览HTML（按 Shift + ESC还原）",
          fullscreen: "全屏（按ESC还原）",
          clear: "清空",
          search: "搜索",
          help: "使用帮助",
          info: "关于" + titleDefault
        },
        buttons: {
          enter: "确定",
          cancel: "取消",
          close: "关闭"
        },
        dialog: {
          link: {
            title: "添加链接",
            url: "链接地址",
            urlTitle: "链接标题",
            urlEmpty: "错误：请填写链接地址。"
          },
          referenceLink: {
            title: "添加引用链接",
            name: "引用名称",
            url: "链接地址",
            urlId: "链接ID",
            urlTitle: "链接标题",
            nameEmpty: "错误：引用链接的名称不能为空。",
            idEmpty: "错误：请填写引用链接的ID。",
            urlEmpty: "错误：请填写引用链接的URL地址。"
          },
          image: {
            title: "添加图片",
            url: "图片地址",
            link: "图片链接",
            alt: "图片描述",
            uploadButton: "本地上传",
            imageURLEmpty: "错误：图片地址不能为空。",
            uploadFileEmpty: "错误：上传的图片不能为空。",
            formatNotAllowed: "错误：只允许上传图片文件，允许上传的图片文件格式有："
          },
          preformattedText: {
            title: "添加预格式文本或代码块",
            emptyAlert: "错误：请填写预格式文本或代码的内容。"
          },
          codeBlock: {
            title: "添加代码块",
            selectLabel: "代码语言：",
            selectDefaultText: "请选择代码语言",
            otherLanguage: "其他语言",
            unselectedLanguageAlert: "错误：请选择代码所属的语言类型。",
            codeEmptyAlert: "错误：请填写代码内容。"
          },
          htmlEntities: {
            title: "HTML 实体字符"
          },
          help: {
            title: "使用帮助"
          }
        }
      }
    };
    var toolbarModes = {
      full: ["undo", "redo", "|", "bold", "del", "italic", "quote", "ucwords", "uppercase", "lowercase", "|", "h1", "h2", "h3", "h4", "h5", "h6", "|", "list-ul", "list-ol", "hr", "|", "link", "reference-link", "image", "code", "preformatted-text", "code-block", "table", "datetime", "emoji", "html-entities", "pagebreak", "|", "goto-line", "watch", "preview", "fullscreen", "clear", "search", "|", "help", "info"],
      simple: ["undo", "redo", "|", "bold", "del", "italic", "quote", "uppercase", "lowercase", "|", "h1", "h2", "h3", "h4", "h5", "h6", "|", "list-ul", "list-ol", "hr", "|", "watch", "preview", "fullscreen", "|", "help", "info"],
      mini: ["undo", "redo", "|", "watch", "preview", "|", "help", "info"]
    };
    var SettingDefault = {
      classPrefix: classPrefix,
      settingDefault: settingDefault,
      toolbarModes: toolbarModes
    };
    var SettingDefault_1 = SettingDefault.classPrefix;
    var SettingDefault_2 = SettingDefault.settingDefault;
    var SettingDefault_3 = SettingDefault.toolbarModes;

    /**
     * 所需组件加载队列
     * Required components loading queue
     * @returns {editormd}  返回editormd的实例对象
     */
    var loadQueues = function loadQueues() {
      var eMd = this;
      var settings = this.settings;
      var loadPath = settings.path;
      var isIE8 = this.isIE8;

      var loadFlowChartOrSequenceDiagram = function loadFlowChartOrSequenceDiagram() {
        if (isIE8) {
          _this.loadedDisplay();

          return;
        }

        if (settings.flowChart || settings.sequenceDiagram) {
          this.loadScript(loadPath + "raphael.min", function () {
            editormd.loadScript(loadPath + "underscore.min", function () {
              if (!settings.flowChart && settings.sequenceDiagram) {
                editormd.loadScript(loadPath + "sequence-diagram.min", function () {
                  _this.loadedDisplay();
                });
              } else if (settings.flowChart && !settings.sequenceDiagram) {
                editormd.loadScript(loadPath + "flowchart.min", function () {
                  editormd.loadScript(loadPath + "jquery.flowchart.min", function () {
                    _this.loadedDisplay();
                  });
                });
              } else if (settings.flowChart && settings.sequenceDiagram) {
                editormd.loadScript(loadPath + "flowchart.min", function () {
                  editormd.loadScript(loadPath + "jquery.flowchart.min", function () {
                    editormd.loadScript(loadPath + "sequence-diagram.min", function () {
                      _this.loadedDisplay();
                    });
                  });
                });
              }
            });
          });
        } else {
          eMd.loadedDisplay();
        }
      };

      this.loadCSS(loadPath + "codemirror/codemirror.min");

      if (settings.searchReplace && !settings.readOnly) {
        this.loadCSS(loadPath + "codemirror/addon/dialog/dialog");
        this.loadCSS(loadPath + "codemirror/addon/search/matchesonscrollbar");
      }

      if (settings.codeFold) {
        this.loadCSS(loadPath + "codemirror/addon/fold/foldgutter");
      }

      eMd.loadScript(loadPath + "codemirror/codemirror.min", function () {
        eMd.$CodeMirror = CodeMirror;
        eMd.loadScript(loadPath + "codemirror/modes.min", function () {
          eMd.loadScript(loadPath + 'codemirror/addons.min', function () {
            // console.log('loader codemirror')
            // console.trace()
            eMd.setCodeMirror();

            if (settings.mode !== 'gfm' && settings.mode !== 'markdown') {
              eMd.loadedDisplay();
              return false;
            }

            eMd.setToolbar();
            eMd.loadScript(loadPath + "marked.min", function () {
              eMd.$marked = marked;

              if (settings.previewCodeHighlight) {
                eMd.loadScript(loadPath + "prettify.min", function () {
                  loadFlowChartOrSequenceDiagram();
                });
              } else {
                loadFlowChartOrSequenceDiagram();
              }
            });
          });
        });
      });
      return this;
    };
    /**
     * 动态加载JS文件的方法
     * Load javascript file method
     *
     * @param {String}   fileName              JS文件名
     * @param {Function} [callback=function()] 加载成功后执行的回调函数
     * @param {String}   [into="head"]         嵌入页面的位置
     */

    var loadScript = function loadScript(fileName, callback, into) {
      var _this2 = this;

      into = into || 'head';

      callback = callback || function () {};

      var isIE8 = this.isIE8;
      var script = null;
      script = document.createElement('script');
      script.id = fileName.replace(/[\./]+/g, '-');
      script.type = 'text/javascript';
      script.src = fileName + '.js';

      if (isIE8) {
        script.onreadystatechange = function () {
          if (script.readyState) {
            if (script.readyState === 'loaded' || script.readyState === 'complete') {
              script.onreadystatechange = null;
              this.loadFiles.js.push(fileName);
              callback();
            }
          }
        };
      } else {
        script.onload = function () {
          _this2.loadFiles.js.push(fileName);

          callback();
        };
      }

      if (into === 'head') {
        document.getElementsByTagName('head')[0].appendChild(script);
      } else {
        document.body.appendChild(script);
      }
    };
    /**
     * 动态加载CSS文件的方法
     * Load css file method
     *
     * @param {String}   fileName              CSS文件名
     * @param {Function} [callback=function()] 加载成功后执行的回调函数
     * @param {String}   [into="head"]         嵌入页面的位置
     */

    var loadCSS = function loadCSS(fileName, callback, into) {
      var _this3 = this;

      into = into || 'head';

      callback = callback || function () {};

      var css = document.createElement('link');
      css.type = 'text/css';
      css.rel = 'stylesheet';

      css.onload = css.onreadystatechange = function () {
        _this3.loadFiles.css.push(fileName);

        callback();
      };

      css.href = fileName + '.css';

      if (into === 'head') {
        document.getElementsByTagName('head')[0].appendChild(css);
      } else {
        document.body.appendChild(css);
      }
    };
    /**
     * 加载队列完成之后的显示处理
     * Display handle of the module queues loaded after.
     *
     * @param   {Boolean}   recreate   是否为重建编辑器
     * @returns {editormd}             返回editormd的实例对象
     */

    var loadedDisplay = function loadedDisplay(recreate) {
      console.log("==== load display");
      recreate = recreate || false;

      var _this = this;

      var editor = this.editor;
      var preview = this.preview;
      var settings = this.settings;
      this.containerMask.hide();
      this.save();

      if (settings.watch) {
        preview.show();
      }

      editor.data("oldWidth", editor.width()).data("oldHeight", editor.height()); // 为了兼容Zepto

      this.resize();
      this.registerKeyMaps();
      $(window).resize(function () {
        _this.resize();
      });
      this.bindScrollEvent().bindChangeEvent();

      if (!recreate) {
        $.proxy(settings.onload, this)();
      }

      this.state.loaded = true;
      return this;
    };

    /**
     * setEditorTheme() 的别名
     * setEditorTheme() alias
     *
     * @returns {editormd}  返回editormd的实例对象
     */
    var setCodeMirrorTheme = function setCodeMirrorTheme(theme) {
      this.setEditorTheme(theme);
      return this;
    };
    /**
     * 配置和初始化CodeMirror组件
     * CodeMirror initialization
     *
     * @returns {editormd}  返回editormd的实例对象
     */


    var setCodeMirror = function setCodeMirror() {
      var settings = this.settings;
      var editor = this.editor;
      var editormd = this; // console.log(`================`, { editormd, settings })

      if (settings.editorTheme !== 'default') {
        editormd.loadCSS(settings.path + "codemirror/theme/" + settings.editorTheme);
      }

      var codeMirrorConfig = {
        mode: settings.mode,
        theme: settings.editorTheme,
        tabSize: settings.tabSize,
        dragDrop: false,
        autofocus: settings.autoFocus,
        autoCloseTags: settings.autoCloseTags,
        readOnly: settings.readOnly ? "nocursor" : false,
        indentUnit: settings.indentUnit,
        lineNumbers: settings.lineNumbers,
        lineWrapping: settings.lineWrapping,
        extraKeys: {
          "Ctrl-Q": function CtrlQ(cm) {
            cm.foldCode(cm.getCursor());
          }
        },
        foldGutter: settings.codeFold,
        gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"],
        matchBrackets: settings.matchBrackets,
        indentWithTabs: settings.indentWithTabs,
        styleActiveLine: settings.styleActiveLine,
        styleSelectedText: settings.styleSelectedText,
        autoCloseBrackets: settings.autoCloseBrackets,
        showTrailingSpace: settings.showTrailingSpace,
        highlightSelectionMatches: !settings.matchWordHighlight ? false : {
          showToken: settings.matchWordHighlight === "onselected" ? false : /\w/
        }
      };
      this.codeEditor = this.cm = editormd.$CodeMirror.fromTextArea(this.markdownTextarea[0], codeMirrorConfig);
      this.codeMirror = this.cmElement = editor.children(".CodeMirror");

      if (settings.value !== "") {
        this.cm.setValue(settings.value);
      }

      this.codeMirror.css({
        fontSize: settings.fontSize,
        width: !settings.watch ? "100%" : "50%"
      });

      if (settings.autoHeight) {
        this.codeMirror.css("height", "auto");
        this.cm.setOption("viewportMargin", Infinity);
      }

      if (!settings.lineNumbers) {
        this.codeMirror.find(".CodeMirror-gutters").css("border-right", "none");
      }

      return this;
    };
    /**
     * 获取CodeMirror的配置选项
     * Get CodeMirror setting options
     *
     * @returns {Mixed}                  return CodeMirror setting option value
     */


    var getCodeMirrorOption = function getCodeMirrorOption(key) {
      return this.cm.getOption(key);
    };
    /**
     * 配置和重配置CodeMirror的选项
     * CodeMirror setting options / resettings
     *
     * @returns {editormd}  返回editormd的实例对象
     */


    var setCodeMirrorOption = function setCodeMirrorOption(key, value) {
      this.cm.setOption(key, value);
      return this;
    };

    /**
     * 显示工具栏
     * Display toolbar
     *
     * @param   {Function} [callback=function(){}] 回调函数
     * @returns {editormd}  返回editormd的实例对象
     */
    var showToolbar = function showToolbar(callback) {
      var settings = this.settings;

      if (settings.readOnly) {
        return this;
      }

      if (settings.toolbar && (this.toolbar.length < 1 || this.toolbar.find("." + this.classPrefix + "menu").html() === "")) {
        this.setToolbar();
      }

      settings.toolbar = true;
      this.toolbar.show();
      this.resize();
      $.proxy(callback || function () {}, this)();
      return this;
    };
    /**
     * 隐藏工具栏
     * Hide toolbar
     *
     * @param   {Function} [callback=function(){}] 回调函数
     * @returns {editormd}                         this(editormd instance object.)
     */

    var hideToolbar = function hideToolbar(callback) {
      var settings = this.settings;
      settings.toolbar = false;
      this.toolbar.hide();
      this.resize();
      $.proxy(callback || function () {}, this)();
      return this;
    };
    /**
     * 页面滚动时工具栏的固定定位
     * Set toolbar in window scroll auto fixed position
     *
     * @returns {editormd}  返回editormd的实例对象
     */

    var setToolbarAutoFixed = function setToolbarAutoFixed(fixed) {
      var state = this.state;
      var editor = this.editor;
      var toolbar = this.toolbar;
      var settings = this.settings;

      if (typeof fixed !== "undefined") {
        settings.toolbarAutoFixed = fixed;
      }

      var autoFixedHandle = function autoFixedHandle() {
        var $window = $(window);
        var top = $window.scrollTop();

        if (!settings.toolbarAutoFixed) {
          return false;
        }

        if (top - editor.offset().top > 10 && top < editor.height()) {
          toolbar.css({
            position: "fixed",
            width: editor.width() + "px",
            left: ($window.width() - editor.width()) / 2 + "px"
          });
        } else {
          toolbar.css({
            position: "absolute",
            width: "100%",
            left: 0
          });
        }
      };

      if (!state.fullscreen && !state.preview && settings.toolbar && settings.toolbarAutoFixed) {
        $(window).bind("scroll", autoFixedHandle);
      }

      return this;
    };
    /**
     * 配置和初始化工具栏
     * Set toolbar and Initialization
     *
     * @returns {editormd}  返回editormd的实例对象
     */

    var setToolbar = function setToolbar() {
      var settings = this.settings;
      var editormd = this;

      if (settings.readOnly) {
        return this;
      }

      var editor = this.editor;
      var preview = this.preview;
      var classPrefix = this.classPrefix;
      var toolbar = this.toolbar = editor.children("." + classPrefix + "toolbar");

      if (settings.toolbar && toolbar.length < 1) {
        var toolbarHTML = "<div class=\"" + classPrefix + "toolbar\"><div class=\"" + classPrefix + "toolbar-container\"><ul class=\"" + classPrefix + "menu\"></ul></div></div>";
        editor.append(toolbarHTML);
        toolbar = this.toolbar = editor.children("." + classPrefix + "toolbar");
      }

      if (!settings.toolbar) {
        toolbar.hide();
        return this;
      }

      toolbar.show();
      var icons = typeof settings.toolbarIcons === "function" ? settings.toolbarIcons() : typeof settings.toolbarIcons === "string" ? editormd.toolbarModes[settings.toolbarIcons] : settings.toolbarIcons;
      var toolbarMenu = toolbar.find("." + this.classPrefix + "menu");
      var menu = '';
      var pullRight = false;

      for (var i = 0, len = icons.length; i < len; i++) {
        var name = icons[i];

        if (name === "||") {
          pullRight = true;
        } else if (name === "|") {
          menu += "<li class=\"divider\" unselectable=\"on\">|</li>";
        } else {
          var isHeader = /h(\d)/.test(name);
          var index = name;

          if (name === "watch" && !settings.watch) {
            index = "unwatch";
          }

          var title = settings.lang.toolbar[index];
          var iconTexts = settings.toolbarIconTexts[index];
          var iconClass = settings.toolbarIconsClass[index];
          title = typeof title === "undefined" ? "" : title;
          iconTexts = typeof iconTexts === "undefined" ? "" : iconTexts;
          iconClass = typeof iconClass === "undefined" ? "" : iconClass;
          var menuItem = pullRight ? "<li class=\"pull-right\">" : "<li>";

          if (typeof settings.toolbarCustomIcons[name] !== "undefined" && typeof settings.toolbarCustomIcons[name] !== "function") {
            menuItem += settings.toolbarCustomIcons[name];
          } else {
            menuItem += "<a href=\"javascript:;\" title=\"" + title + "\" unselectable=\"on\">";
            menuItem += "<i class=\"fa " + iconClass + "\" name=\"" + name + "\" unselectable=\"on\">" + (isHeader ? name.toUpperCase() : iconClass === "" ? iconTexts : "") + "</i>";
            menuItem += "</a>";
          }

          menuItem += "</li>";
          menu = pullRight ? menuItem + menu : menu + menuItem;
        }
      }

      toolbarMenu.html(menu);
      toolbarMenu.find("[title=\"Lowercase\"]").attr("title", settings.lang.toolbar.lowercase);
      toolbarMenu.find("[title=\"ucwords\"]").attr("title", settings.lang.toolbar.ucwords);
      this.setToolbarHandler();
      this.setToolbarAutoFixed();
      return this;
    };
    var getToolbarHandles = function getToolbarHandles(name) {
      var editormd = this;
      var toolbarHandlers = this.toolbarHandlers = editormd.toolbarHandlers;
      return name && typeof toolbarIconHandlers[name] !== "undefined" ? toolbarHandlers[name] : toolbarHandlers;
    };
    /**
     * 工具栏图标事件处理器
     * Bind toolbar icons event handle
     *
     * @returns {editormd}  返回editormd的实例对象
     */

    var setToolbarHandler = function setToolbarHandler() {
      var _this = this;

      var editormd = this;
      var settings = this.settings;

      if (!settings.toolbar || settings.readOnly) {
        return this;
      }

      var toolbar = this.toolbar;
      var cm = this.cm;
      var classPrefix = this.classPrefix;
      var toolbarIcons = this.toolbarIcons = toolbar.find("." + classPrefix + "menu > li > a");
      var toolbarIconHandlers = this.getToolbarHandles();
      console.log("======", {
        editormd: editormd
      });
      toolbarIcons.bind(editormd.mouseOrTouch("click", "touchend"), function (event) {
        var icon = $(this).children(".fa");
        var name = icon.attr("name");
        var cursor = cm.getCursor();
        var selection = cm.getSelection();

        if (name === "") {
          return;
        }

        _this.activeIcon = icon;

        if (typeof toolbarIconHandlers[name] !== "undefined") {
          $.proxy(toolbarIconHandlers[name], _this)(cm);
        } else {
          if (typeof settings.toolbarHandlers[name] !== "undefined") {
            $.proxy(settings.toolbarHandlers[name], _this)(cm, icon, cursor, selection);
          }
        }

        if (name !== "link" && name !== "reference-link" && name !== "image" && name !== "code-block" && name !== "preformatted-text" && name !== "watch" && name !== "preview" && name !== "search" && name !== "fullscreen" && name !== "info") {
          cm.focus();
        }

        return false;
      });
      return this;
    };

    /**
     * 鼠标和触摸事件的判断/选择方法
     * MouseEvent or TouchEvent type switch
     *
     * @param   {String} [mouseEventType="click"]    供选择的鼠标事件
     * @param   {String} [touchEventType="touchend"] 供选择的触摸事件
     * @returns {String} EventType                   返回事件类型名称
     */
    var mouseOrTouch = function mouseOrTouch(mouseEventType, touchEventType) {
      mouseEventType = mouseEventType || "click";
      touchEventType = touchEventType || "touchend";
      var eventType = mouseEventType;

      try {
        document.createEvent("TouchEvent");
        eventType = touchEventType;
      } catch (e) {}

      return eventType;
    };

    /**
     * Parse & Saving Markdown source code
     *
     * @returns {editormd}     返回editormd的实例对象
     */
    var flowchartTimer;
    function editorSave() {

      var _this = this;

      var state = this.state;
      var settings = this.settings;
      var cm = this.cm;
      var cmValue = cm.getValue();
      var previewContainer = this.previewContainer;
      var editormd = this;

      if (settings.mode !== "gfm" && settings.mode !== "markdown") {
        this.markdownTextarea.val(cmValue);
        return this;
      }

      var marked = editormd.$marked;
      var markdownToC = this.markdownToC = [];
      var rendererOptions = this.markedRendererOptions = {
        toc: settings.toc,
        tocm: settings.tocm,
        tocStartLevel: settings.tocStartLevel,
        pageBreak: settings.pageBreak,
        taskList: settings.taskList,
        emoji: settings.emoji,
        tex: settings.tex,
        atLink: settings.atLink,
        // for @link
        emailLink: settings.emailLink,
        // for mail address auto link
        flowChart: settings.flowChart,
        sequenceDiagram: settings.sequenceDiagram,
        previewCodeHighlight: settings.previewCodeHighlight
      };
      var markedOptions = this.markedOptions = {
        renderer: editormd.markedRenderer(markdownToC, rendererOptions),
        gfm: true,
        tables: true,
        breaks: true,
        pedantic: false,
        sanitize: settings.htmlDecode ? false : true,
        // 关闭忽略HTML标签，即开启识别HTML标签，默认为false
        smartLists: true,
        smartypants: true
      };
      marked.setOptions(markedOptions);
      var newMarkdownDoc = editormd.$marked(cmValue, markedOptions);
      newMarkdownDoc = editormd.filterHTMLTags(newMarkdownDoc, settings.htmlDecode);
      this.markdownTextarea.text(cmValue);
      cm.save();

      if (settings.saveHTMLToTextarea) {
        this.htmlTextarea.text(newMarkdownDoc);
      }

      if (settings.watch || !settings.watch && state.preview) {
        previewContainer.html(newMarkdownDoc);
        previewContainer.find(".task-list-item").each(function () {
          $(this).parent().addClass("task-list");
        });
        this.previewCodeHighlight();

        if (settings.toc) {
          var tocContainer = settings.tocContainer === "" ? previewContainer : $(settings.tocContainer);
          var tocMenu = tocContainer.find("." + this.classPrefix + "toc-menu");
          tocContainer.attr("previewContainer", settings.tocContainer === "" ? "true" : "false");

          if (settings.tocContainer !== "" && tocMenu.length > 0) {
            tocMenu.remove();
          }

          editormd.markdownToCRenderer(markdownToC, tocContainer, settings.tocDropdown, settings.tocStartLevel);

          if (settings.tocDropdown || tocContainer.find("." + this.classPrefix + "toc-menu").length > 0) {
            editormd.tocDropdownMenu(tocContainer, settings.tocTitle !== "" ? settings.tocTitle : this.lang.tocTitle);
          }

          if (settings.tocContainer !== "") {
            previewContainer.find(".markdown-toc").css("border", "none");
          }
        }

        if (settings.tex) {
          if (!editormd.kaTeXLoaded && settings.autoLoadModules) {
            editormd.loadKaTeX(function () {
              editormd.$katex = katex;
              editormd.kaTeXLoaded = true;

              _this.katexRender();
            });
          } else {
            editormd.$katex = katex;
            this.katexRender();
          }
        }

        if (settings.flowChart || settings.sequenceDiagram) {
          flowchartTimer = setTimeout(function () {
            clearTimeout(flowchartTimer);

            _this.flowChartAndSequenceDiagramRender();

            flowchartTimer = null;
          }, 10);
        }

        if (state.loaded) {
          $.proxy(settings.onchange, this)();
        }
      }

      return this;
    }

    var EditorMD = /*#__PURE__*/function () {
      function EditorMD(id, options) {
        this.initValue();
        this.init(id, options);
      }

      var _proto = EditorMD.prototype;

      _proto.initValue = function initValue() {
        this.state = {
          watching: false,
          loaded: false,
          preview: false,
          fullscreen: false
        };
        this.loadPlugins = {};
        this.loadFiles = {
          js: [],
          css: [],
          plugin: []
        };
        this.toolbarModes = SettingDefault_3;
        this.mouseOrTouch = mouseOrTouch;
        this.loadedDisplay = loadedDisplay;
        this.save = editorSave;
      };

      _proto.init = function init(id, options) {
        options = options || {};

        if (typeof id === 'object') {
          options = id;
        } // var classPrefix      = classPrefix;


        var settings = $.extend(true, {}, SettingDefault_2, options);

        if (options.imageFormats) {
          settings.imageFormats = options.imageFormats;
        }

        if (options.emojiCategories) {
          settings.emojiCategories = options.emojiCategories;
        }

        var editor;

        if (id instanceof HTMLElement) {
          var element = id;
          editor = this.editor = $(element);
          id = element.id.length > 0 ? element.id : settings.id;
        } else {
          id = typeof id === "object" ? settings.id : id;
          editor = this.editor = $("#" + id);
        }

        this.id = id;
        this.lang = settings.lang;
        var classNames = this.classNames = {
          textarea: {
            html: SettingDefault_1 + "html-textarea",
            markdown: SettingDefault_1 + "markdown-textarea"
          }
        };
        settings.pluginPath = settings.pluginPath === '' ? settings.path + '../plugins/' : settings.pluginPath;
        this.state.watching = settings.watch ? true : false;

        if (!editor.hasClass("editormd")) {
          editor.addClass("editormd");
        }

        editor.css({
          width: typeof settings.width === "number" ? settings.width + "px" : settings.width,
          height: typeof settings.height === "number" ? settings.height + "px" : settings.height
        });

        if (settings.autoHeight) {
          editor.css("height", "auto");
        }

        var markdownTextarea = this.markdownTextarea = editor.children("textarea");

        if (markdownTextarea.length < 1) {
          editor.append("<textarea></textarea>");
          markdownTextarea = this.markdownTextarea = editor.children("textarea");
        }

        markdownTextarea.addClass(classNames.textarea.markdown).attr("placeholder", settings.placeholder);

        if (typeof markdownTextarea.attr("name") === "undefined" || markdownTextarea.attr("name") === "") {
          markdownTextarea.attr("name", settings.name !== "" ? settings.name : id + "-markdown-doc");
        }

        var appendElements = [!settings.readOnly ? "<a href=\"javascript:;\" class=\"fa fa-close " + SettingDefault_1 + "preview-close-btn\"></a>" : "", settings.saveHTMLToTextarea ? "<textarea class=\"" + classNames.textarea.html + "\" name=\"" + id + "-html-code\"></textarea>" : "", "<div class=\"" + SettingDefault_1 + "preview\"><div class=\"markdown-body " + SettingDefault_1 + "preview-container\"></div></div>", "<div class=\"" + SettingDefault_1 + "container-mask\" style=\"display:block;\"></div>", "<div class=\"" + SettingDefault_1 + "mask\"></div>"].join("\n");
        editor.append(appendElements).addClass(SettingDefault_1 + "vertical");

        if (settings.theme !== "") {
          editor.addClass(SettingDefault_1 + "theme-" + settings.theme);
        }

        this.mask = editor.children("." + SettingDefault_1 + "mask");
        this.containerMask = editor.children("." + SettingDefault_1 + "container-mask");

        if (settings.markdown !== "") {
          markdownTextarea.val(settings.markdown);
        }

        if (settings.appendMarkdown !== "") {
          markdownTextarea.val(markdownTextarea.val() + settings.appendMarkdown);
        }

        this.htmlTextarea = editor.children("." + classNames.textarea.html);
        this.preview = editor.children("." + SettingDefault_1 + "preview");
        this.previewContainer = this.preview.children("." + SettingDefault_1 + "preview-container");

        if (settings.previewTheme !== "") {
          this.preview.addClass(SettingDefault_1 + "preview-theme-" + settings.previewTheme);
        }

        if (typeof define === "function" && define.amd) {
          if (typeof window.katex !== "undefined") {
            editormd.$katex = window.katex;
          }

          if (settings.searchReplace && !settings.readOnly) {
            editormd.loadCSS(settings.path + "codemirror/addon/dialog/dialog");
            editormd.loadCSS(settings.path + "codemirror/addon/search/matchesonscrollbar");
          }
        }

        editormd.settings = settings;
        this.settings = settings; // console.log(`====ddd`,this)

        if (typeof define === "function" && define.amd || !settings.autoLoadModules) {
          if (typeof window.CodeMirror !== "undefined") {
            editormd.$CodeMirror = window.CodeMirror;
          }

          if (typeof window.marked !== "undefined") {
            editormd.$marked = window.marked;
          }

          this.setCodeMirror().setToolbar().loadedDisplay();
        } else {
          this.loadQueues();
        } // editorTheme.call(this);


        return this;
      };

      return EditorMD;
    }();

    EditorMD.showToolbar = showToolbar;
    EditorMD.prototype.hideToolbar = hideToolbar;
    EditorMD.prototype.setToolbarAutoFixed = setToolbarAutoFixed;
    EditorMD.prototype.setToolbar = setToolbar;
    EditorMD.prototype.getToolbarHandles = getToolbarHandles;
    EditorMD.prototype.setToolbarHandler = setToolbarHandler;
    EditorMD.prototype.loadQueues = loadQueues;
    EditorMD.prototype.loadCSS = loadCSS;
    EditorMD.prototype.loadScript = loadScript;
    EditorMD.prototype.setCodeMirrorTheme = setCodeMirrorTheme;
    EditorMD.prototype.setCodeMirror = setCodeMirror;
    EditorMD.prototype.getCodeMirrorOption = getCodeMirrorOption;
    EditorMD.prototype.setCodeMirrorOption = setCodeMirrorOption;

    function editormd$1(id, options) {
      var test = new EditorMD(id, options);
      console.log("=======", {
        test: test
      });
      return test;
    }

    return editormd$1;

})));
