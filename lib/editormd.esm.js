/**
 * marked - a markdown parser
 * Copyright (c) 2011-2020, Christopher Jeffrey. (MIT Licensed)
 * https://github.com/markedjs/marked
 */

/**
 * DO NOT EDIT THIS FILE
 * The code in this file is generated from files in ./src/
 */

const classPrefix = 'editormd-';
const titleDefault = 'Editor.md';

const settingDefault = {
    mode                 : "gfm",          //gfm or markdown
    name                 : "",             // Form element name
    value                : "",             // value for CodeMirror, if mode not gfm/markdown
    theme                : "",             // Editor.md self themes, before v1.5.0 is CodeMirror theme, default empty
    editorTheme          : "default",      // Editor area, this is CodeMirror theme at v1.5.0
    previewTheme         : "",             // Preview area theme, default empty
    markdown             : "",             // Markdown source code
    appendMarkdown       : "",             // if in init textarea value not empty, append markdown to textarea
    width                : "100%",
    height               : "100%",
    path                 : "./lib/",       // Dependents module file directory
    pluginPath           : "",             // If this empty, default use settings.path + "../plugins/"
    delay                : 300,            // Delay parse markdown to html, Uint : ms
    autoLoadModules      : true,           // Automatic load dependent module files
    watch                : true,
    placeholder          : "Enjoy Markdown! coding now...",
    gotoLine             : true,
    codeFold             : false,
    autoHeight           : false,
    autoFocus            : true,
    autoCloseTags        : true,
    searchReplace        : true,
    syncScrolling        : true,           // true | false | "single", default true
    readOnly             : false,
    tabSize              : 4,
    indentUnit           : 4,
    lineNumbers          : true,
    lineWrapping         : true,
    autoCloseBrackets    : true,
    showTrailingSpace    : true,
    matchBrackets        : true,
    indentWithTabs       : true,
    styleSelectedText    : true,
    matchWordHighlight   : true,           // options: true, false, "onselected"
    styleActiveLine      : true,           // Highlight the current line
    dialogLockScreen     : true,
    dialogShowMask       : true,
    dialogDraggable      : true,
    dialogMaskBgColor    : "#fff",
    dialogMaskOpacity    : 0.1,
    fontSize             : "13px",
    saveHTMLToTextarea   : false,
    disabledKeyMaps      : [],
    
    onload               : function() {},
    onresize             : function() {},
    onchange             : function() {},
    onwatch              : null,
    onunwatch            : null,
    onpreviewing         : function() {},
    onpreviewed          : function() {},
    onfullscreen         : function() {},
    onfullscreenExit     : function() {},
    onscroll             : function() {},
    onpreviewscroll      : function() {},
    
    imageUpload          : false,
    imageFormats         : ["jpg", "jpeg", "gif", "png", "bmp", "webp"],
    imageUploadURL       : "",
    crossDomainUpload    : false,
    uploadCallbackURL    : "",
    
    toc                  : true,           // Table of contents
    tocm                 : false,           // Using [TOCM], auto create ToC dropdown menu
    tocTitle             : "",             // for ToC dropdown menu btn
    tocDropdown          : false,
    tocContainer         : "",
    tocStartLevel        : 1,              // Said from H1 to create ToC
    htmlDecode           : false,          // Open the HTML tag identification 
    pageBreak            : true,           // Enable parse page break [========]
    atLink               : true,           // for @link
    emailLink            : true,           // for email address auto link
    taskList             : false,          // Enable Github Flavored Markdown task lists
    emoji                : false,          // :emoji: , Support Github emoji, Twitter Emoji (Twemoji);
                                           // Support FontAwesome icon emoji :fa-xxx: > Using fontAwesome icon web fonts;
                                           // Support Editor.md logo icon emoji :editormd-logo: :editormd-logo-1x: > 1~8x;
    tex                  : false,          // TeX(LaTeX), based on KaTeX
    flowChart            : false,          // flowChart.js only support IE9+
    sequenceDiagram      : false,          // sequenceDiagram.js only support IE9+
    previewCodeHighlight : true,
            
    toolbar              : true,           // show/hide toolbar
    toolbarAutoFixed     : true,           // on window scroll auto fixed position
    toolbarIcons         : "full",
    toolbarTitles        : {},
    toolbarHandlers      : {
        ucwords : function() {
            return editormd.toolbarHandlers.ucwords;
        },
        lowercase : function() {
            return editormd.toolbarHandlers.lowercase;
        }
    },
    toolbarCustomIcons   : {               // using html tag create toolbar icon, unused default <a> tag.
        lowercase        : "<a href=\"javascript:;\" title=\"Lowercase\" unselectable=\"on\"><i class=\"fa\" name=\"lowercase\" style=\"font-size:24px;margin-top: -10px;\">a</i></a>",
        "ucwords"        : "<a href=\"javascript:;\" title=\"ucwords\" unselectable=\"on\"><i class=\"fa\" name=\"ucwords\" style=\"font-size:20px;margin-top: -3px;\">Aa</i></a>"
    }, 
    toolbarIconsClass    : {
        undo             : "fa-undo",
        redo             : "fa-repeat",
        bold             : "fa-bold",
        del              : "fa-strikethrough",
        italic           : "fa-italic",
        quote            : "fa-quote-left",
        uppercase        : "fa-font",
        h1               : classPrefix + "bold",
        h2               : classPrefix + "bold",
        h3               : classPrefix + "bold",
        h4               : classPrefix + "bold",
        h5               : classPrefix + "bold",
        h6               : classPrefix + "bold",
        "list-ul"        : "fa-list-ul",
        "list-ol"        : "fa-list-ol",
        hr               : "fa-minus",
        link             : "fa-link",
        "reference-link" : "fa-anchor",
        image            : "fa-picture-o",
        code             : "fa-code",
        "preformatted-text" : "fa-file-code-o",
        "code-block"     : "fa-file-code-o",
        table            : "fa-table",
        datetime         : "fa-clock-o",
        emoji            : "fa-smile-o",
        "html-entities"  : "fa-copyright",
        pagebreak        : "fa-newspaper-o",
        "goto-line"      : "fa-terminal", // fa-crosshairs
        watch            : "fa-eye-slash",
        unwatch          : "fa-eye",
        preview          : "fa-desktop",
        search           : "fa-search",
        fullscreen       : "fa-arrows-alt",
        clear            : "fa-eraser",
        help             : "fa-question-circle",
        info             : "fa-info-circle"
    },        
    toolbarIconTexts     : {},
    
    lang : {
        name        : "zh-cn",
        description : "开源在线Markdown编辑器<br/>Open source online Markdown editor.",
        tocTitle    : "目录",
        toolbar     : {
            undo             : "撤销（Ctrl+Z）",
            redo             : "重做（Ctrl+Y）",
            bold             : "粗体",
            del              : "删除线",
            italic           : "斜体",
            quote            : "引用",
            ucwords          : "将每个单词首字母转成大写",
            uppercase        : "将所选转换成大写",
            lowercase        : "将所选转换成小写",
            h1               : "标题1",
            h2               : "标题2",
            h3               : "标题3",
            h4               : "标题4",
            h5               : "标题5",
            h6               : "标题6",
            "list-ul"        : "无序列表",
            "list-ol"        : "有序列表",
            hr               : "横线",
            link             : "链接",
            "reference-link" : "引用链接",
            image            : "添加图片",
            code             : "行内代码",
            "preformatted-text" : "预格式文本 / 代码块（缩进风格）",
            "code-block"     : "代码块（多语言风格）",
            table            : "添加表格",
            datetime         : "日期时间",
            emoji            : "Emoji表情",
            "html-entities"  : "HTML实体字符",
            pagebreak        : "插入分页符",
            "goto-line"      : "跳转到行",
            watch            : "关闭实时预览",
            unwatch          : "开启实时预览",
            preview          : "全窗口预览HTML（按 Shift + ESC还原）",
            fullscreen       : "全屏（按ESC还原）",
            clear            : "清空",
            search           : "搜索",
            help             : "使用帮助",
            info             : "关于" + titleDefault
        },
        buttons : {
            enter  : "确定",
            cancel : "取消",
            close  : "关闭"
        },
        dialog : {
            link : {
                title    : "添加链接",
                url      : "链接地址",
                urlTitle : "链接标题",
                urlEmpty : "错误：请填写链接地址。"
            },
            referenceLink : {
                title    : "添加引用链接",
                name     : "引用名称",
                url      : "链接地址",
                urlId    : "链接ID",
                urlTitle : "链接标题",
                nameEmpty: "错误：引用链接的名称不能为空。",
                idEmpty  : "错误：请填写引用链接的ID。",
                urlEmpty : "错误：请填写引用链接的URL地址。"
            },
            image : {
                title    : "添加图片",
                url      : "图片地址",
                link     : "图片链接",
                alt      : "图片描述",
                uploadButton     : "本地上传",
                imageURLEmpty    : "错误：图片地址不能为空。",
                uploadFileEmpty  : "错误：上传的图片不能为空。",
                formatNotAllowed : "错误：只允许上传图片文件，允许上传的图片文件格式有："
            },
            preformattedText : {
                title             : "添加预格式文本或代码块", 
                emptyAlert        : "错误：请填写预格式文本或代码的内容。"
            },
            codeBlock : {
                title             : "添加代码块",                    
                selectLabel       : "代码语言：",
                selectDefaultText : "请选择代码语言",
                otherLanguage     : "其他语言",
                unselectedLanguageAlert : "错误：请选择代码所属的语言类型。",
                codeEmptyAlert    : "错误：请填写代码内容。"
            },
            htmlEntities : {
                title : "HTML 实体字符"
            },
            help : {
                title : "使用帮助"
            }
        }
    }
};

const toolbarModes = {
    full : [
        "undo", "redo", "|", 
        "bold", "del", "italic", "quote", "ucwords", "uppercase", "lowercase", "|", 
        "h1", "h2", "h3", "h4", "h5", "h6", "|", 
        "list-ul", "list-ol", "hr", "|",
        "link", "reference-link", "image", "code", "preformatted-text", "code-block", "table", "datetime", "emoji", "html-entities", "pagebreak", "|",
        "goto-line", "watch", "preview", "fullscreen", "clear", "search", "|",
        "help", "info"
    ],
    simple : [
        "undo", "redo", "|", 
        "bold", "del", "italic", "quote", "uppercase", "lowercase", "|", 
        "h1", "h2", "h3", "h4", "h5", "h6", "|", 
        "list-ul", "list-ol", "hr", "|",
        "watch", "preview", "fullscreen", "|",
        "help", "info"
    ],
    mini : [
        "undo", "redo", "|",
        "watch", "preview", "|",
        "help", "info"
    ]
};

var SettingDefault = {
    classPrefix,
    titleDefault,
    settingDefault,
    toolbarModes
};
var SettingDefault_1 = SettingDefault.classPrefix;
var SettingDefault_2 = SettingDefault.titleDefault;
var SettingDefault_3 = SettingDefault.settingDefault;
var SettingDefault_4 = SettingDefault.toolbarModes;

const regexDefault = {
    atLink        : /@(\w+)/g,
    email         : /(\w+)@(\w+)\.(\w+)\.?(\w+)?/g,
    emailLink     : /(mailto:)?([\w\.\_]+)@(\w+)\.(\w+)\.?(\w+)?/g,
    emoji         : /:([\w\+-]+):/g,
    emojiDatetime : /(\d{1,2}:\d{1,2}:\d{1,2})/g,
    twemoji       : /:(tw-([\w]+)-?(\w+)?):/g,
    fontAwesome   : /:(fa-([\w]+)(-(\w+)){0,}):/g,
    editormdLogo  : /:(editormd-logo-?(\w+)?):/g,
    pageBreak     : /^\[[=]{8,}\]$/
};

/**
 * 所需组件加载队列
 * Required components loading queue
 * @returns {editormd}  返回editormd的实例对象
 */

const loadQueues = function () {
    var eMd = this;
    var settings = this.settings;
    var loadPath = settings.path;
    const { isIE8 } = this;
    var loadFlowChartOrSequenceDiagram = function () {
        if (isIE8) {
            _this.loadedDisplay();
            return
        }

        if (settings.flowChart || settings.sequenceDiagram) {
            this.loadScript(loadPath + "raphael.min", function () {
                editormd.loadScript(loadPath + "underscore.min", function() {  

                    if (!settings.flowChart && settings.sequenceDiagram) 
                    {
                        editormd.loadScript(loadPath + "sequence-diagram.min", function() {
                            _this.loadedDisplay();
                        });
                    }
                    else if (settings.flowChart && !settings.sequenceDiagram) 
                    {      
                        editormd.loadScript(loadPath + "flowchart.min", function() {  
                            editormd.loadScript(loadPath + "jquery.flowchart.min", function() {
                                _this.loadedDisplay();
                            });
                        });
                    }
                    else if (settings.flowChart && settings.sequenceDiagram) {
                        editormd.loadScript(loadPath + "flowchart.min", function () {
                            editormd.loadScript(loadPath + "jquery.flowchart.min", function () {
                                editormd.loadScript(loadPath + "sequence-diagram.min", function () {
                                    _this.loadedDisplay();
                                });
                            });
                        });
                    }
                });
            });
        } else {
            eMd.loadedDisplay();
        }
    };

    this.loadCSS(loadPath + "codemirror/codemirror.min");

    if (settings.searchReplace && !settings.readOnly) {
        this.loadCSS(loadPath + "codemirror/addon/dialog/dialog");
        this.loadCSS(loadPath + "codemirror/addon/search/matchesonscrollbar");
    }

    if (settings.codeFold) {
        this.loadCSS(loadPath + "codemirror/addon/fold/foldgutter");
    }

    eMd.loadScript(loadPath + "codemirror/codemirror.min", function () {
        eMd.$CodeMirror = CodeMirror;

        eMd.loadScript(loadPath + "codemirror/modes.min", function () {
            eMd.loadScript(loadPath + 'codemirror/addons.min', function () {
                // console.log('loader codemirror')
                // console.trace()

                eMd.setCodeMirror();

                if (settings.mode !== 'gfm' && settings.mode !== 'markdown') {
                    eMd.loadedDisplay();
                    return false
                }
                eMd.setToolbar();

                eMd.loadScript(loadPath + "marked.min", function () {
                    eMd.$marked = marked;

                    if (settings.previewCodeHighlight) {
                        eMd.loadScript(loadPath + "prettify.min", function () {
                            loadFlowChartOrSequenceDiagram();
                        });
                    } else {
                        loadFlowChartOrSequenceDiagram();
                    }
                });
            });
        });
    });

    return this
};

/**
 * 动态加载JS文件的方法
 * Load javascript file method
 *
 * @param {String}   fileName              JS文件名
 * @param {Function} [callback=function()] 加载成功后执行的回调函数
 * @param {String}   [into="head"]         嵌入页面的位置
 */

const loadScript = function (fileName, callback, into) {
    into = into || 'head';
    callback = callback || function () {};

    const { isIE8 } = this;
    var script = null;
    script = document.createElement('script');
    script.id = fileName.replace(/[\./]+/g, '-');
    script.type = 'text/javascript';
    script.src = fileName + '.js';

    if (isIE8) {
        script.onreadystatechange = function () {
            if (script.readyState) {
                if (script.readyState === 'loaded' || script.readyState === 'complete') {
                    script.onreadystatechange = null;
                    this.loadFiles.js.push(fileName);
                    callback();
                }
            }
        };
    } else {
        script.onload = () => {
            this.loadFiles.js.push(fileName);
            callback();
        };
    }

    if (into === 'head') {
        document.getElementsByTagName('head')[0].appendChild(script);
    } else {
        document.body.appendChild(script);
    }
};

/**
 * 动态加载CSS文件的方法
 * Load css file method
 *
 * @param {String}   fileName              CSS文件名
 * @param {Function} [callback=function()] 加载成功后执行的回调函数
 * @param {String}   [into="head"]         嵌入页面的位置
 */
const loadCSS = function (fileName, callback, into) {
    into = into || 'head';
    callback = callback || function () {};

    var css = document.createElement('link');
    css.type = 'text/css';
    css.rel = 'stylesheet';

    css.onload = css.onreadystatechange = () => {
        this.loadFiles.css.push(fileName);
        callback();
    };
    css.href = fileName + '.css';

    if (into === 'head') {
        document.getElementsByTagName('head')[0].appendChild(css);
    } else {
        document.body.appendChild(css);
    }
};

/**
 * 加载队列完成之后的显示处理
 * Display handle of the module queues loaded after.
 *
 * @param   {Boolean}   recreate   是否为重建编辑器
 * @returns {editormd}             返回editormd的实例对象
 */

const loadedDisplay = function (recreate) {
    recreate             = recreate || false;

    var _this            = this;
    var editor           = this.editor;
    var preview          = this.preview;
    var settings         = this.settings;

    this.containerMask.hide();
    this.save();

    if (settings.watch) {
        preview.show();
    }

    editor.data("oldWidth", editor.width()).data("oldHeight", editor.height()); // 为了兼容Zepto

    this.resize();
    this.registerKeyMaps();

    $(window).resize(function () {
        _this.resize();
    });

    this.bindScrollEvent().bindChangeEvent();

    if (!recreate) {
        $.proxy(settings.onload, this)();
    }

    this.state.loaded = true;

    return this;
};

/**
 * setEditorTheme() 的别名
 * setEditorTheme() alias
 *
 * @returns {editormd}  返回editormd的实例对象
 */

const setCodeMirrorTheme = function (theme) {
    this.setEditorTheme(theme);
    return this
};

/**
 * 配置和初始化CodeMirror组件
 * CodeMirror initialization
 *
 * @returns {editormd}  返回editormd的实例对象
 */

const setCodeMirror = function () {
    var settings = this.settings;
    var editor = this.editor;
    const editormd = this;

    // console.log(`================`, { editormd, settings })

    if (settings.editorTheme !== 'default') {
        editormd.loadCSS(settings.path + "codemirror/theme/" + settings.editorTheme);
    }

    var codeMirrorConfig = {
        mode                      : settings.mode,
        theme                     : settings.editorTheme,
        tabSize                   : settings.tabSize,
        dragDrop                  : false,
        autofocus                 : settings.autoFocus,
        autoCloseTags             : settings.autoCloseTags,
        readOnly                  : (settings.readOnly) ? "nocursor" : false,
        indentUnit                : settings.indentUnit,
        lineNumbers               : settings.lineNumbers,
        lineWrapping              : settings.lineWrapping,
        extraKeys                 : {
                                        "Ctrl-Q": function (cm) {
                                            cm.foldCode(cm.getCursor());
                                        }
                                    },
        foldGutter                : settings.codeFold,
        gutters                   : ["CodeMirror-linenumbers", "CodeMirror-foldgutter"],
        matchBrackets             : settings.matchBrackets,
        indentWithTabs            : settings.indentWithTabs,
        styleActiveLine           : settings.styleActiveLine,
        styleSelectedText         : settings.styleSelectedText,
        autoCloseBrackets         : settings.autoCloseBrackets,
        showTrailingSpace         : settings.showTrailingSpace,
        highlightSelectionMatches : ( (!settings.matchWordHighlight) ? false : { showToken: (settings.matchWordHighlight === "onselected") ? false : /\w/ } )
    };

    this.codeEditor = this.cm        = editormd.$CodeMirror.fromTextArea(this.markdownTextarea[0], codeMirrorConfig);
    this.codeMirror = this.cmElement = editor.children(".CodeMirror");
    
    if (settings.value !== "")
    {
        this.cm.setValue(settings.value);
    }

    this.codeMirror.css({
        fontSize : settings.fontSize,
        width    : (!settings.watch) ? "100%" : "50%"
    });
    
    if (settings.autoHeight)
    {
        this.codeMirror.css("height", "auto");
        this.cm.setOption("viewportMargin", Infinity);
    }
    
    if (!settings.lineNumbers)
    {
        this.codeMirror.find(".CodeMirror-gutters").css("border-right", "none");
    }

    return this
};

/**
 * 获取CodeMirror的配置选项
 * Get CodeMirror setting options
 *
 * @returns {Mixed}                  return CodeMirror setting option value
 */

const getCodeMirrorOption = function (key) {
    return this.cm.getOption(key)
};

/**
 * 配置和重配置CodeMirror的选项
 * CodeMirror setting options / resettings
 *
 * @returns {editormd}  返回editormd的实例对象
 */

const setCodeMirrorOption = function (key, value) {
    this.cm.setOption(key, value);

    return this
};

/**
 * 显示工具栏
 * Display toolbar
 *
 * @param   {Function} [callback=function(){}] 回调函数
 * @returns {editormd}  返回editormd的实例对象
 */

const showToolbar = function (callback) {
    var settings = this.settings;

    if (settings.readOnly) {
        return this
    }

    if (
        settings.toolbar &&
        (
            this.toolbar.length < 1 ||
            this.toolbar.find("." + this.classPrefix + "menu").html() === ""
        )
    ) {
        this.setToolbar();
    }

    settings.toolbar = true;

    this.toolbar.show();
    this.resize();

    $.proxy(callback || function () {}, this)();

    return this
};

/**
 * 隐藏工具栏
 * Hide toolbar
 *
 * @param   {Function} [callback=function(){}] 回调函数
 * @returns {editormd}                         this(editormd instance object.)
 */

const hideToolbar = function (callback) {
    var settings = this.settings;

    settings.toolbar = false;
    this.toolbar.hide();
    this.resize();

    $.proxy(callback || function () {}, this)();

    return this
};

/**
 * 页面滚动时工具栏的固定定位
 * Set toolbar in window scroll auto fixed position
 *
 * @returns {editormd}  返回editormd的实例对象
 */

const setToolbarAutoFixed = function (fixed) {
    var state    = this.state;
    var editor   = this.editor;
    var toolbar  = this.toolbar;
    var settings = this.settings;

    if (typeof fixed !== "undefined") {
        settings.toolbarAutoFixed = fixed;
    }

    var autoFixedHandle = function () {
        var $window = $(window);
        var top     = $window.scrollTop();

        if (!settings.toolbarAutoFixed) {
            return false
        }

        if (top - editor.offset().top > 10 && top < editor.height()) {
            toolbar.css({
                position : "fixed",
                width    : editor.width() + "px",
                left     : ($window.width() - editor.width()) / 2 + "px"
            });
        } else {
            toolbar.css({
                position : "absolute",
                width    : "100%",
                left     : 0
            });
        }
    };

    if (!state.fullscreen && !state.preview && settings.toolbar && settings.toolbarAutoFixed) {
        $(window).bind("scroll", autoFixedHandle);
    }

    return this
};

/**
 * 配置和初始化工具栏
 * Set toolbar and Initialization
 *
 * @returns {editormd}  返回editormd的实例对象
 */

const setToolbar = function () {
    var settings    = this.settings;
    const editormd = this;

    if (settings.readOnly) {
        return this
    }

    var editor      = editormd.editor;
    var preview     = this.preview;
    var classPrefix = editormd.classPrefix;

    var toolbar     = this.toolbar = editor.children("." + classPrefix + "toolbar");

    if (settings.toolbar && toolbar.length < 1) {
        var toolbarHTML = "<div class=\"" + classPrefix + "toolbar\"><div class=\"" + classPrefix + "toolbar-container\"><ul class=\"" + classPrefix + "menu\"></ul></div></div>";

        editor.append(toolbarHTML);
        toolbar = this.toolbar = editor.children("." + classPrefix + "toolbar");
    }

    if (!settings.toolbar) {
        toolbar.hide();

        return this
    }

    toolbar.show();

    var icons       = (typeof settings.toolbarIcons === "function") ? settings.toolbarIcons() : ((typeof settings.toolbarIcons === "string")  ? editormd.toolbarModes[settings.toolbarIcons] : settings.toolbarIcons);

    var toolbarMenu = toolbar.find(`.${this.classPrefix}menu`);
    var menu = '';
    var pullRight   = false;

    for (var i = 0, len = icons.length; i < len; i++) {
        var name = icons[i];

        if (name === "||") {
            pullRight = true;
        } else if (name === "|") {
            menu += "<li class=\"divider\" unselectable=\"on\">|</li>";
        } else {
            var isHeader = (/h(\d)/.test(name));
            var index    = name;

            if (name === "watch" && !settings.watch) {
                index = "unwatch";
            }

            var title     = settings.lang.toolbar[index];
            var iconTexts = settings.toolbarIconTexts[index];
            var iconClass = settings.toolbarIconsClass[index];

            title     = (typeof title     === "undefined") ? "" : title;
            iconTexts = (typeof iconTexts === "undefined") ? "" : iconTexts;
            iconClass = (typeof iconClass === "undefined") ? "" : iconClass;

            var menuItem = pullRight ? "<li class=\"pull-right\">" : "<li>";

            if (typeof settings.toolbarCustomIcons[name] !== "undefined" && typeof settings.toolbarCustomIcons[name] !== "function") {
                menuItem += settings.toolbarCustomIcons[name];
            } else {
                menuItem += "<a href=\"javascript:;\" title=\"" + title + "\" unselectable=\"on\">";
                menuItem += "<i class=\"fa " + iconClass + "\" name=\""+name+"\" unselectable=\"on\">"+((isHeader) ? name.toUpperCase() : ( (iconClass === "") ? iconTexts : "") ) + "</i>";
                menuItem += "</a>";
            }

            menuItem += "</li>";

            menu = pullRight ? menuItem + menu : menu + menuItem;
        }
    }

    toolbarMenu.html(menu);

    toolbarMenu.find("[title=\"Lowercase\"]").attr("title", settings.lang.toolbar.lowercase);
    toolbarMenu.find("[title=\"ucwords\"]").attr("title", settings.lang.toolbar.ucwords);

    this.setToolbarHandler();
    this.setToolbarAutoFixed();

    return this
};

const getToolbarHandles = function (name) {
    const editormd = this;
    var toolbarHandlers = this.toolbarHandlers = editormd.toolbarHandlers;

    return (name && typeof toolbarIconHandlers[name] !== "undefined") ? toolbarHandlers[name] : toolbarHandlers
};

/**
 * 工具栏图标事件处理器
 * Bind toolbar icons event handle
 *
 * @returns {editormd}  返回editormd的实例对象
 */

const setToolbarHandler = function () {
    var _this               = this;
    const editormd = this;
    var settings            = this.settings;

    if (!settings.toolbar || settings.readOnly) {
        return this
    }

    var toolbar             = this.toolbar;
    var cm                  = this.cm;
    var classPrefix         = this.classPrefix;
    var toolbarIcons        = this.toolbarIcons = toolbar.find("." + classPrefix + "menu > li > a");
    var toolbarIconHandlers = this.getToolbarHandles();

    console.log(`======`, { editormd });

    toolbarIcons.bind(editormd.mouseOrTouch("click", "touchend"), function (event) {
        var icon                = $(this).children(".fa");
        var name                = icon.attr("name");
        var cursor              = cm.getCursor();
        var selection           = cm.getSelection();

        if (name === "") {
            return
        }

        _this.activeIcon = icon;

        if (typeof toolbarIconHandlers[name] !== "undefined") {
            $.proxy(toolbarIconHandlers[name], _this)(cm);
        } else {
            if (typeof settings.toolbarHandlers[name] !== "undefined") {
                $.proxy(settings.toolbarHandlers[name], _this)(cm, icon, cursor, selection);
            }
        }

        if (
            name !== "link" &&
            name !== "reference-link" &&
            name !== "image" &&
            name !== "code-block" &&
            name !== "preformatted-text" &&
            name !== "watch" &&
            name !== "preview" &&
            name !== "search" &&
            name !== "fullscreen" &&
            name !== "info"
        ) {
            cm.focus();
        }
        return false
    });

    return this
};

/**
 * 鼠标和触摸事件的判断/选择方法
 * MouseEvent or TouchEvent type switch
 *
 * @param   {String} [mouseEventType="click"]    供选择的鼠标事件
 * @param   {String} [touchEventType="touchend"] 供选择的触摸事件
 * @returns {String} EventType                   返回事件类型名称
 */

const mouseOrTouch = function (mouseEventType, touchEventType) {
    mouseEventType = mouseEventType || "click";
    touchEventType = touchEventType || "touchend";

    var eventType  = mouseEventType;

    try {
        document.createEvent("TouchEvent");
        eventType = touchEventType;
    } catch (e) {

    }

    return eventType
};

/**
 * Parse & Saving Markdown source code
 *
 * @returns {editormd}     返回editormd的实例对象
 */
var flowchartTimer;

function editorSave () {

    var _this            = this;
    var state            = this.state;
    var settings         = this.settings;
    var cm               = this.cm;
    var cmValue          = cm.getValue();
    var previewContainer = this.previewContainer;
    const editormd = this;

    if (settings.mode !== "gfm" && settings.mode !== "markdown") {
        this.markdownTextarea.val(cmValue);

        return this;
    }

    var marked          = editormd.$marked;
    var markdownToC     = this.markdownToC = [];
    var rendererOptions = this.markedRendererOptions = {
        toc                  : settings.toc,
        tocm                 : settings.tocm,
        tocStartLevel        : settings.tocStartLevel,
        pageBreak            : settings.pageBreak,
        taskList             : settings.taskList,
        emoji                : settings.emoji,
        tex                  : settings.tex,
        atLink               : settings.atLink,           // for @link
        emailLink            : settings.emailLink,        // for mail address auto link
        flowChart            : settings.flowChart,
        sequenceDiagram      : settings.sequenceDiagram,
        previewCodeHighlight : settings.previewCodeHighlight,
    };

    var markedOptions = this.markedOptions = {
        renderer    : editormd.markedRenderer(markdownToC, rendererOptions),
        gfm         : true,
        tables      : true,
        breaks      : true,
        pedantic    : false,
        sanitize    : !settings.htmlDecode,  // 关闭忽略HTML标签，即开启识别HTML标签，默认为false
        smartLists  : true,
        smartypants : true
    };

    marked.setOptions(markedOptions);

    var newMarkdownDoc = editormd.$marked(cmValue, markedOptions);

    newMarkdownDoc = editormd.filterHTMLTags(newMarkdownDoc, settings.htmlDecode);

    this.markdownTextarea.text(cmValue);

    cm.save();

    if (settings.saveHTMLToTextarea) {
        this.htmlTextarea.text(newMarkdownDoc);
    }

    if (settings.watch || (!settings.watch && state.preview)) {
        previewContainer.html(newMarkdownDoc);

        previewContainer.find(".task-list-item").each(function () {
            $(this).parent().addClass("task-list");
        });

        this.previewCodeHighlight();

        if (settings.toc) {
            var tocContainer = (settings.tocContainer === "") ? previewContainer : $(settings.tocContainer);
            var tocMenu      = tocContainer.find("." + this.classPrefix + "toc-menu");

            tocContainer.attr("previewContainer", (settings.tocContainer === "") ? "true" : "false");

            if (settings.tocContainer !== "" && tocMenu.length > 0) {
                tocMenu.remove();
            }

            editormd.markdownToCRenderer(markdownToC, tocContainer, settings.tocDropdown, settings.tocStartLevel);

            if (settings.tocDropdown || tocContainer.find("." + this.classPrefix + "toc-menu").length > 0) {
                editormd.tocDropdownMenu(tocContainer, (settings.tocTitle !== "") ? settings.tocTitle : this.lang.tocTitle);
            }

            if (settings.tocContainer !== "") {
                previewContainer.find(".markdown-toc").css("border", "none");
            }
        }

        if (settings.tex) {
            if (!editormd.kaTeXLoaded && settings.autoLoadModules)  {
                editormd.loadKaTeX(function () {
                    editormd.$katex = katex;
                    editormd.kaTeXLoaded = true;
                    _this.katexRender();
                });
            } else {
                editormd.$katex = katex;
                this.katexRender();
            }
        }

        if (settings.flowChart || settings.sequenceDiagram) {
            flowchartTimer = setTimeout(function () {
                clearTimeout(flowchartTimer);
                _this.flowChartAndSequenceDiagramRender();
                flowchartTimer = null;
            }, 10);
        }

        if (state.loaded) {
            $.proxy(settings.onchange, this)();
        }
    }

    return this;
}

class EmojiRenderer { 

    constructor(options) {
        this.defaults = {};
        this.config = $.extend(this.defaults, options || {}); 
    }

    execute(text) {
        const regexDefault = this.config;
        text = text.replace(editormd.regexs.emojiDatetime, function($1) {           
            return $1.replace(/:/g, "&#58;");
        });
        
        var matchs = text.match(regexDefault.emojiReg);
        
        if (!matchs ) {
            return text;
        }
        for (var i = 0, len = matchs.length; i < len; i++)
        {            
            if (matchs[i] === ":+1:") {
                matchs[i] = ":\\+1:";
            }
    
            text = text.replace(new RegExp(matchs[i]), function($1, $2){
                var faMatchs = $1.match(regexDefault.faIconReg);
                var name     = $1.replace(/:/g, "");
    
                if (faMatchs)
                {                        
                    for (var fa = 0, len1 = faMatchs.length; fa < len1; fa++)
                    {
                        var faName = faMatchs[fa].replace(/:/g, "");
                        
                        return "<i class=\"fa " + faName + " fa-emoji\" title=\"" + faName.replace("fa-", "") + "\"></i>";
                    }
                }
                else
                {
                    var emdlogoMathcs = $1.match(regexDefault.editormdLogoReg);
                    var twemojiMatchs = $1.match(regexDefault.twemojiReg);
                    if (emdlogoMathcs)                                        
                    {                            
                        for (var x = 0, len2 = emdlogoMathcs.length; x < len2; x++)
                        {
                            var logoName = emdlogoMathcs[x].replace(/:/g, "");
                            return "<i class=\"" + logoName + "\" title=\"Editor.md logo (" + logoName + ")\"></i>";
                        }
                    }
                    else if (twemojiMatchs) 
                    {
                        for (var t = 0, len3 = twemojiMatchs.length; t < len3; t++)
                        {
                            var twe = twemojiMatchs[t].replace(/:/g, "").replace("tw-", "");
                            return "<img src=\"" + editormd.twemoji.path + twe + editormd.twemoji.ext + "\" title=\"twemoji-" + twe + "\" alt=\"twemoji-" + twe + "\" class=\"emoji twemoji\" />";
                        }
                    }
                    else
                    {
                        var src = (name === "+1") ? "plus1" : name;
                        src     = (src === "black_large_square") ? "black_square" : src;
                        src     = (src === "moon") ? "waxing_gibbous_moon" : src;
    
                        return "<img src=\"" + editormd.emoji.path + src + editormd.emoji.ext + "\" class=\"emoji\" title=\"&#58;" + name + "&#58;\" alt=\"&#58;" + name + "&#58;\" />";
                    }
                }
            });
        }
    
        return text;
    }
}

class AtLinkRenderer {
    constructor (options) {
        this.defaults = {};
        this.options = $.extend(this.defaults, options || {}); 
    }

    execute (text) {
        const { atLinkReg, emailReg, emailLinkReg, atLink, emailLink, atLinkBase } = this.options;
        if (atLinkReg.test(text)) { 
            if (atLink) 
            {
                text = text.replace(emailReg, function($1, $2, $3, $4) {
                    return $1.replace(/@/g, "_#_&#64;_#_");
                });

                text = text.replace(atLinkReg, function($1, $2) {
                    return "<a href=\"" + atLinkBase + "" + $2 + "\" title=\"&#64;" + $2 + "\" class=\"at-link\">" + $1 + "</a>";
                }).replace(/_#_&#64;_#_/g, "@");
            }
            
            if (emailLink)
            {
                text = text.replace(emailLinkReg, function($1, $2, $3, $4, $5) {
                    return (!$2 && $.inArray($5, "jpg|jpeg|png|gif|webp|ico|icon|pdf".split("|")) < 0) ? "<a href=\"mailto:" + $1 + "\">"+$1+"</a>" : $1;
                });
            }

            return text;
        }

        return text;
    }
}

class LinkRenderer {
    constructor(options) {
        this.defaults = {};
        this.options = $.extend(this.defaults, options || {}); 
    }

    execute(href, title, text) {

        const { atLinkReg } = this.options;
        if (this.options.sanitize) {
            try {
                var prot = decodeURIComponent(unescape(href)).replace(/[^\w:]/g, "").toLowerCase();

                if (prot.indexOf("javascript:") === 0) {
                    return "";
                }
            } catch(e) {
                return "";
            }
        }

        var out = "<a href=\"" + href + "\"";
        
        if ( atLinkReg.test(title) || atLinkReg.test(text))
        {
            if (title)
            {
                out += " title=\"" + title.replace(/@/g, "&#64;");
            }
            
            return out + "\">" + text.replace(/@/g, "&#64;") + "</a>";
        }

        if (title) {
            out += " title=\"" + title + "\"";
        }

        out += ">" + text + "</a>";

        return out;
    }
}

class EditorRenderer {
    constructor (options) {
        this.defaults = {};
        if (options) {
            this.config = $.extend(this.defaults, options || {});
        }
    }
}

/**
 * 清除字符串两边的空格
 * Clear the space of strings both sides.
 *
 * @param   {String}    str            string
 * @returns {String}                   trimed string
 */
function trimText (str) {
    return (!String.prototype.trim) ? str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "") : str.trim();
}

class HeadingRenderder extends EditorRenderer {
    constructor (options) {
        super(options);
        this.trim = trimText;
    }

    execute (text, level) {
        let { markdownToC, headerPrefix} = this.config;

        var _headingIds     = [];
        var hasLinkReg     = /\s*\<a\s*href\=\"(.*)\"\s*([^\>]*)\>(.*)\<\/a\>\s*/;
        // var getLinkTextReg = /\s*\<a\s*([^\>]+)\>([^\>]*)\<\/a\>\s*/g;

        if (hasLinkReg.test(text)) {
            var tempText = [];
            text         = text.split(/\<a\s*([^\>]+)\>([^\>]*)\<\/a\>/);

            for (var i = 0, len = text.length; i < len; i++) {
                tempText.push(text[i].replace(/\s*href\=\"(.*)\"\s*/g, ""));
            }

            text = tempText.join(" ");
        }

        text = this.trim(text);
        
        var escapedText = text.toLowerCase().replace(/[^\w]+/g, "-");

        var toc = {
            text  : text,
            level : level,
            slug  : escapedText
        };
        
        let isChinese = /^[\u4e00-\u9fa5]+$/.test(text);
        
        var id        = (isChinese) ? escape(text).replace(/\%/g, "") : text.toLowerCase().replace(/[^\w]+/g, "-");
        if (_headingIds.indexOf(id) >= 0) {
            id += mdUtil.rand(100, 999999);
        }

        _headingIds.push(id);

        toc.id = id;

        markdownToC.push(toc);
        
        let header = $(`<h${level}/>`, { id: `h${level}-${headerPrefix + id}` });
        let referecenLink = $(`<a/>`, { name: text, class: 'reference-link' });
        header.append(referecenLink);

        let octiconLink = $(`<span/>`, { class: 'header-link octicon octicon-link' });
        header.append(octiconLink);

        return header;
    }
}

/**
 * Custom Marked renderer rules
 *
 * @param   {Array}    markdownToC     Pass in an array for receiving TOC
 * @returns {Renderer} markedRenderer  Return the marked Renderer custom object
 */

function markedRenderer (markdownToC, options) {
    var defaults = {
        toc                  : true,           // Table of contents
        tocm                 : false,
        tocStartLevel        : 1,              // Said from H1 to create ToC
        pageBreak            : true,
        atLink               : true,           // for @link
        emailLink            : true,           // for mail address auto link
        taskList             : false,          // Enable Github Flavored Markdown task lists
        emoji                : false,          // :emoji: , Support Twemoji, fontAwesome, Editor.md logo emojis.
        tex                  : false,          // TeX(LaTeX), based on KaTeX
        flowChart            : false,          // flowChart.js only support IE9+
        sequenceDiagram      : false          // sequenceDiagram.js only support IE9+
    };

    var settings = $.extend(defaults, options || {});
    const editormd = this;
    // this.options.imgPath = null;

    var marked          = editormd.$marked;
    var markedRenderer  = new marked.Renderer();
    markdownToC         = markdownToC || [];

    var regexs          = editormd.regexs;
    var atLinkReg       = regexs.atLink;
    var emailReg        = regexs.email;
    var emailLinkReg    = regexs.emailLink;
    var pageBreakReg    = regexs.pageBreak;

    markedRenderer.options.imgPath = null;

    markedRenderer.options = $.extend({}, markedRenderer.options, editormd.settings);

    const emojiRenderer = new EmojiRenderer({
        faIconReg: regexs.fontAwesome,
        emojiReg: regexs.emoji,
        editormdLogoReg: regexs.editormdLogo,
        twemojiReg      :regexs.twemoji
    });

    markedRenderer.emoji = (text) => {
        if (!settings.emoji) {
            return text;
        }
        return emojiRenderer.execute(text);
    };

    const mdSettings = this.settings;

    const atLinkRenderer = new AtLinkRenderer({
        atLinkReg: regexs.atLink,
        emailReg: regexs.emailReg,
        emailLinkReg: regexs.emailLinkReg,
        atLink: settings.atLink,
        emailLink : settings.emailLink,
        atLinkBase : mdSettings.atLinkBase
    });

    markedRenderer.atLink = function (text) {
        return atLinkRenderer.execute(text);
    };

    const linkRenderer = new LinkRenderer({ atLinkReg: regexs.atLink, sanitize: this.sanitize });
    markedRenderer.link = function (href, title, text) { 
        return linkRenderer.execute(href, title, text);
    };

    const headingRenderder = new HeadingRenderder({ markdownToC : markdownToC || [], headerPrefix : markedRenderer.options.headerPrefix });

    markedRenderer.heading = function (text, level) {
        var hasLinkReg     = /\s*\<a\s*href\=\"(.*)\"\s*([^\>]*)\>(.*)\<\/a\>\s*/;
        const header = headingRenderder.execute(text, level);
        if (hasLinkReg) {
            header.append(this.atLink(this.emoji(text)));
        } else {
            header.append(this.atLink(this.emoji(text)));
        }
        return header.prop('outerHTML');
    };

    markedRenderer.pageBreak = function (text) {
        if (pageBreakReg.test(text) && settings.pageBreak) {
            text = "<hr style=\"page-break-after:always;\" class=\"page-break editormd-page-break\" />";
        }
        return text;
    };

    markedRenderer.paragraph = function(text) {
        var isTeXInline     = /\$\$(.*)\$\$/g.test(text);
        var isTeXLine       = /^\$\$(.*)\$\$$/.test(text);
        var isTeXAddClass   = (isTeXLine)     ? " class=\"" + editormd.classNames.tex + "\"" : "";
        var isToC           = (settings.tocm) ? /^(\[TOC\]|\[TOCM\])$/.test(text) : /^\[TOC\]$/.test(text);
        var isToCMenu = /^\[TOCM\]$/.test(text);
        const isCodeTree = /^\[CodeTree\]$/.test(text);

        if (!isTeXLine && isTeXInline) {
            text = text.replace(/(\$\$([^\$]*)\$\$)+/g, function($1, $2) {
                return "<span class=\"" + editormd.classNames.tex + "\">" + $2.replace(/\$/g, "") + "</span>";
            });
        } else {
            text = (isTeXLine) ? text.replace(/\$/g, "") : text;
        }

        var tocHTML = "<div class=\"markdown-toc editormd-markdown-toc\">" + text + "</div>";

        if (isCodeTree) {
            var treeViewHTML = "<div class=\"editormd-code-treeview\">" + text + "</div>";
            return treeViewHTML;
        }
        return (isToC) ? ( (isToCMenu) ? "<div class=\"editormd-toc-menu\">" + tocHTML + "</div><br/>" : tocHTML )
                       : ( (pageBreakReg.test(text)) ? this.pageBreak(text) : "<p" + isTeXAddClass + ">" + this.atLink(this.emoji(text)) + "</p>\n" );
    };

    const fileExtention = {
        '.js':'javascript'
    };

    markedRenderer.code = function (code, lang, file) {
        if (typeof marked.Renderer.prototype[lang] === 'undefined' && typeof lang !== 'undefined') {
            let ext = lang.substring(lang.lastIndexOf("."), lang.length);

            if (fileExtention.hasOwnProperty(ext)) {
                editormd.addCodeTree(lang);

                return this.code(code,fileExtention[ext], lang)
            }
        }
        
        if (lang === "seq" || lang === "sequence")
        {
            return "<div class=\"sequence-diagram\">" + code + "</div>";
        } 
        else if ( lang === "flow")
        {
            return "<div class=\"flowchart\">" + code + "</div>";
        } 
        else if ( lang === "math" || lang === "latex" || lang === "katex")
        {
            return "<p class=\"" + editormd.classNames.tex + "\">" + code + "</p>";
        } 
        else 
        {
            let codePre = marked.Renderer.prototype.code.apply(this, arguments);
            if (typeof file !== 'undefined') {
                return `<p class="code-file-path" >${file}</p>` + codePre;
            }
            return codePre;
        }
    };

    markedRenderer.tablecell = function(content, flags) {
        var type = (flags.header) ? "th" : "td";
        var tag  = (flags.align)  ? "<" + type +" style=\"text-align:" + flags.align + "\">" : "<" + type + ">";

        return tag + this.atLink(this.emoji(content)) + "</" + type + ">\n";
    };

    markedRenderer.listitem = function(text, task) {
        if (settings.taskList && task) {
            text = text.replace("<input ", "<input class='task-list-item-checkbox' ");

            return "<li class=\"task-list-item\">" + this.atLink(this.emoji(text)) + "</li>";
        } else {
            return "<li>" + this.atLink(this.emoji(text)) + "</li>";
        }
    };

    markedRenderer.image = function (href, title, text) {

        // href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
        if (href === null) {
            return text;
        }

        let out = '<img src="' + href + '" alt="' + text + '"';
        if (title) {
            out += ' title="' + title + '"';
        }
        out += '/>';

        // return this.prototype.image(href, title, text);
        return out;
    };

    return markedRenderer;
}

/**
 * 简单地过滤指定的HTML标签
 * Filter custom html tags
 *
 * @param   {String}   html          要过滤HTML
 * @param   {String}   filters       要过滤的标签
 * @returns {String}   html          返回过滤的HTML
 */

function filterHTMLTags (html, filters) {
    if (typeof html !== "string") {
        html = html.toString();
    }

    if (typeof filters !== "string") {
        return html;
    }

    var expression = filters.split("|");
    var filterTags = expression[0].split(",");
    var attrs      = expression[1];

    for (var i = 0, len = filterTags.length; i < len; i++)
    {
        var tag = filterTags[i];

        html = html.replace(new RegExp("\<\s*" + tag + "\s*([^\>]*)\>([^\>]*)\<\s*\/" + tag + "\s*\>", "igm"), "");
    }
    
    //return html;

    if (typeof attrs !== "undefined")
    {
        var htmlTagRegex = /\<(\w+)\s*([^\>]*)\>([^\>]*)\<\/(\w+)\>/ig;

        if (attrs === "*")
        {
            html = html.replace(htmlTagRegex, function($1, $2, $3, $4, $5) {
                return "<" + $2 + ">" + $4 + "</" + $5 + ">";
            });         
        }
        else if (attrs === "on*")
        {
            html = html.replace(htmlTagRegex, function($1, $2, $3, $4, $5) {
                var el = $("<" + $2 + ">" + $4 + "</" + $5 + ">");
                var _attrs = $($1)[0].attributes;
                var $attrs = {};
                
                $.each(_attrs, function(i, e) {
                    if (e.nodeName !== "\"") {
                        $attrs[e.nodeName] = e.nodeValue;

                        // Fixed like <a href="javascript:alert('xss')"></a> XSS problem, Copy from pull request #532
                        if (e.nodeName === "href" && e.nodeValue.toLowerCase().indexOf("javascript:") >= 0) {
                            $attrs[e.nodeName] = "javascript:;";
                        }
                    }
                });
                
                $.each($attrs, function(i) {                        
                    if (i.indexOf("on") === 0) {
                        delete $attrs[i];
                    }
                });
                
                el.attr($attrs);
                
                var text = (typeof el[1] !== "undefined") ? $(el[1]).text() : "";

                return el[0].outerHTML + text;
            });
        }
        else
        {
            html = html.replace(htmlTagRegex, function($1, $2, $3, $4) {
                var filterAttrs = attrs.split(",");
                var el = $($1);
                el.html($4);

                $.each(filterAttrs, function(i) {
                    el.attr(filterAttrs[i], null);
                });

                return el[0].outerHTML;
            });
        }
    }

    return html;
}

/**
 * 高亮预览HTML的pre代码部分
 * highlight of preview codes
 *
 * @returns {editormd}             返回editormd的实例对象
 */

function previewCodeHighlight () {
    var settings         = this.settings;
    var previewContainer = this.previewContainer;

    if (settings.previewCodeHighlight) {
        previewContainer.find("pre").addClass("prettyprint linenums");

        if (typeof prettyPrint !== "undefined") {
            prettyPrint();
        }
    }

    return this;
}

/**
 *
 * 生成TOC(Table of Contents)
 * Creating ToC (Table of Contents)
 *
 * @param   {Array}    toc             从marked获取的TOC数组列表
 * @param   {Element}  container       插入TOC的容器元素
 * @param   {Integer}  startLevel      Hx 起始层级
 * @param   {object}   markedRenderer  Marked Renderer
 * @returns {Object}   tocContainer    返回ToC列表容器层的jQuery对象元素
 */

function markdownToCRenderer (toc, container, tocDropdown, startLevel, markedRenderer) {
    markedRenderer = markedRenderer || null;

    var html        = "";
    var lastLevel   = 0;
    var classPrefix = this.classPrefix;

    startLevel      = startLevel  || 1;

    for (var i = 0, len = toc.length; i < len; i++) {
        var text  = toc[i].text;
        var level = toc[i].level;

        if (level < startLevel) {
            continue;
        }

        if (level > lastLevel) {
            html += "";
        } else if (level < lastLevel) {
            html += (new Array(lastLevel - level + 2)).join("</ul></li>");
        } else {
            html += "</ul></li>";
        }

        // fixed https://github.com/pandao/editor.md/issues/476
        // fixed https://github.com/pandao/editor.md/issues/649
        var href = text.replace(/(<([^>]+)>)/ig, ""); // /<[^>]*>/g

        if (markedRenderer) {
            text = markedRenderer.emoji(text); // Fixed Heading can't has emoji code
        }

        html += "<li><a class=\"toc-level-" + level + "\" href=\"#" + href + "\" level=\"" + level + "\">" + text + "</a><ul>";
        lastLevel = level;
    }

    var tocContainer = container.find(".markdown-toc");

    if ((tocContainer.length < 1 && container.attr("previewContainer") === "false")) {
        var tocHTML = "<div class=\"markdown-toc " + classPrefix + "markdown-toc\"></div>";

        tocHTML = (tocDropdown) ? "<div class=\"" + classPrefix + "toc-menu\">" + tocHTML + "</div>" : tocHTML;
        container.html(tocHTML);
        tocContainer = container.find(".markdown-toc");
    }

    if (tocDropdown) {
        tocContainer.wrap("<div class=\"" + classPrefix + "toc-menu\"></div><br/>");
    }

    tocContainer.html("<ul class=\"markdown-toc-list\"></ul>").children(".markdown-toc-list").html(html.replace(/\r?\n?\<ul\>\<\/ul\>/g, ""));
    return tocContainer;
}

/**
 * 设置编辑器的宽度
 * Set editor width
 *
 * @param   {Number|String} width  编辑器宽度值
 * @returns {editormd}             返回editormd的实例对象
 */

const width = function (width) {
    this.editor.css("width", (typeof width === "number") ? width  + "px" : width);
    this.resize();

    return this;
};

/**
 * 设置编辑器的高度
 * Set editor height
 *
 * @param   {Number|String} height  编辑器高度值
 * @returns {editormd}              返回editormd的实例对象
 */

function height (height) {
    this.editor.css("height", (typeof height === "number")  ? height  + "px" : height);
    this.resize();

    return this;
}

/**
 * 调整编辑器的尺寸和布局
 * Resize editor layout
 *
 * @param   {Number|String} [width=null]  编辑器宽度值
 * @param   {Number|String} [height=null] 编辑器高度值
 * @returns {editormd}                    返回editormd的实例对象
 */

const resize = function (width, height) {
    width  = width  || null;
    height = height || null;

    var state      = this.state;
    var editor     = this.editor;
    var preview    = this.preview;
    var toolbar    = this.toolbar;
    var settings   = this.settings;
    var codeMirror = this.codeMirror;
    
    if (width)
    {
        editor.css("width", (typeof width  === "number") ? width  + "px" : width);
    }
    
    if (settings.autoHeight && !state.fullscreen && !state.preview)
    {
        editor.css("height", "auto");
        codeMirror.css("height", "auto");
    } 
    else 
    {
        if (height) 
        {
            editor.css("height", (typeof height === "number") ? height + "px" : height);
        }
        
        if (state.fullscreen)
        {
            editor.height($(window).height());
        }

        if (settings.toolbar && !settings.readOnly) 
        {
            codeMirror.css("margin-top", toolbar.height() + 1).height(editor.height() - toolbar.height());
        } 
        else
        {
            codeMirror.css("margin-top", 0).height(editor.height());
        }
    }
    
    if(settings.watch) 
    {
        codeMirror.width(editor.width() / 2);
        preview.width((!state.preview) ? editor.width() / 2 : editor.width());
        
        this.previewContainer.css("padding", settings.autoHeight ? "20px 20px 50px 40px" : "20px");
        
        if (settings.toolbar && !settings.readOnly) 
        {
            preview.css("top", toolbar.height() + 1);
        } 
        else 
        {
            preview.css("top", 0);
        }
        
        if (settings.autoHeight && !state.fullscreen && !state.preview)
        {
            preview.height("");
        }
        else
        {                
            var previewHeight = (settings.toolbar && !settings.readOnly) ? editor.height() - toolbar.height() : editor.height();
            
            preview.height(previewHeight);
        }
    } 
    else 
    {
        codeMirror.width(editor.width());
        preview.hide();
    }
    
    if (state.loaded) 
    {
        $.proxy(settings.onresize, this)();
    }

    return this;
};

/**
 * 添加 CodeMirror 键盘快捷键
 * Add CodeMirror keyboard shortcuts key map
 *
 * @returns {editormd}  返回editormd的实例对象
 */

function addKeyMap (map, bottom) {
    this.cm.addKeyMap(map, bottom);

    return this;
}

/**
 * 移除 CodeMirror 键盘快捷键
 * Remove CodeMirror keyboard shortcuts key map
 *
 * @returns {editormd}  返回editormd的实例对象
 */

function removeKeyMap (map) {
    this.cm.removeKeyMap(map);

    return this;
}

/**
 * 注册键盘快捷键处理
 * Register CodeMirror keyMaps (keyboard shortcuts).
 *
 * @param   {Object}    keyMap      KeyMap key/value {"(Ctrl/Shift/Alt)-Key" : function(){}}
 * @returns {editormd}              return this
 */

function registerKeyMaps (keyMap) {
    var _this           = this;
    var cm              = this.cm;
    var settings        = this.settings;
    var toolbarHandlers = this.toolbarHandlers;
    var disabledKeyMaps = settings.disabledKeyMaps;

    keyMap              = keyMap || null;

    if (keyMap) {
        for (var i in keyMap) {
            if ($.inArray(i, disabledKeyMaps) < 0) {
                var map = {};
                map[i]  = keyMap[i];

                cm.addKeyMap(keyMap);
            }
        }
    } else {
        for (var k in this.keyMaps)
        {
            var _keyMap = this.keyMaps[k];
            var handle = (typeof _keyMap === "string") ? $.proxy(toolbarHandlers[_keyMap], _this) : $.proxy(_keyMap, _this);

            if ($.inArray(k, ["F9", "F10", "F11"]) < 0 && $.inArray(k, disabledKeyMaps) < 0) {
                var _map = {};
                _map[k] = handle;

                cm.addKeyMap(_map);
            }
        }

        $(window).keydown(function (event) {
            var keymaps = {
                "120" : "F9",
                "121" : "F10",
                "122" : "F11"
            };

            if ( $.inArray(keymaps[event.keyCode], disabledKeyMaps) < 0 )
            {
                switch (event.keyCode)
                {
                    case 120:
                            $.proxy(toolbarHandlers["watch"], _this)();
                            return false;
                        
                    case 121:
                            $.proxy(toolbarHandlers["preview"], _this)();
                            return false;
                        
                    case 122:
                            $.proxy(toolbarHandlers["fullscreen"], _this)();                        
                            return false;
                }
            }
        });
    }

    return this;
}

/**
 * 注册事件处理方法
 * Bind editor event handle
 *
 * @param   {String}     eventType      event type
 * @param   {Function}   callback       回调函数
 * @returns {editormd}                  this(editormd instance object.)
 */

function on (eventType, callback) {
    var settings = this.settings;

    if (typeof settings["on" + eventType] !== "undefined") {
        settings["on" + eventType] = $.proxy(callback, this);
    }

    return this;
}

/**
 * 解除事件处理方法
 * Unbind editor event handle
 *
 * @param   {String}   eventType          event type
 * @returns {editormd}                    this(editormd instance object.)
 */

function off (eventType) {
    var settings = this.settings;
    
    if (typeof settings["on" + eventType] !== "undefined") 
    {
        settings["on" + eventType] = function(){};
    }
    
    return this;
}

/**
 * 编辑器界面重建，用于动态语言包或模块加载等
 * Recreate editor
 *
 * @returns {editormd}  返回editormd的实例对象
 */

function recreateEvent() {
    var editor           = this.editor;
    var settings         = this.settings;
    
    this.codeMirror.remove();
    
    this.setCodeMirror();

    if (!settings.readOnly) 
    {
        if (editor.find(".editormd-dialog").length > 0) {
            editor.find(".editormd-dialog").remove();
        }
        
        if (settings.toolbar) 
        {  
            this.getToolbarHandles();                  
            this.setToolbar();
        }
    }
    
    this.loadedDisplay(true);

    return this;
}

/**
 * 绑定同步滚动
 *
 * @returns {editormd} return this
 */

function bindScrollEvent () {
    var _this            = this;
    var preview          = this.preview;
    var settings         = this.settings;
    var codeMirror       = this.codeMirror;
    var mouseOrTouch     = this.mouseOrTouch;

    if (!settings.syncScrolling) {
        return this;
    }

    var cmBindScroll = function () {
        codeMirror.find(".CodeMirror-scroll").bind(mouseOrTouch("scroll", "touchmove"), function (event) {
            var height    = $(this).height();
            var scrollTop = $(this).scrollTop();
            var percent   = (scrollTop / $(this)[0].scrollHeight);
console.log(`====`,{height, scrollTop });
            var tocHeight = 0;
            
            preview.find(".markdown-toc-list").each(function(){
                tocHeight += $(this).height();
            });
            
            var tocMenuHeight = preview.find(".editormd-toc-menu").height();
            tocMenuHeight = (!tocMenuHeight) ? 0 : tocMenuHeight;

            if (scrollTop === 0) 
            {
                preview.scrollTop(0);
            } 
            else if (scrollTop + height >= $(this)[0].scrollHeight - 16)
            { 
                preview.scrollTop(preview[0].scrollHeight);                        
            } 
            else
            {
                preview.scrollTop((preview[0].scrollHeight  + tocHeight + tocMenuHeight) * percent);
            }
            
            $.proxy(settings.onscroll, _this)(event);
        });
    };

    var cmUnbindScroll = function() {
        codeMirror.find(".CodeMirror-scroll").unbind(mouseOrTouch("scroll", "touchmove"));
    };

    var previewBindScroll = function() {
        
        preview.bind(mouseOrTouch("scroll", "touchmove"), function(event) {
            var height    = $(this).height();
            var scrollTop = $(this).scrollTop();         
            var percent   = (scrollTop / $(this)[0].scrollHeight);
            var codeView  = codeMirror.find(".CodeMirror-scroll");

            if(scrollTop === 0) 
            {
                codeView.scrollTop(0);
            }
            else if (scrollTop + height >= $(this)[0].scrollHeight)
            {
                codeView.scrollTop(codeView[0].scrollHeight);                        
            }
            else 
            {
                codeView.scrollTop(codeView[0].scrollHeight * percent);
            }
            
            $.proxy(settings.onpreviewscroll, _this)(event);
        });

    };

    var previewUnbindScroll = function() {
        preview.unbind(mouseOrTouch("scroll", "touchmove"));
    }; 

    codeMirror.bind({
        mouseover  : cmBindScroll,
        mouseout   : cmUnbindScroll,
        touchstart : cmBindScroll,
        touchend   : cmUnbindScroll
    });
    
    if (settings.syncScrolling === "single") {
        return this;
    }
    
    preview.bind({
        mouseover  : previewBindScroll,
        mouseout   : previewUnbindScroll,
        touchstart : previewBindScroll,
        touchend   : previewUnbindScroll
    });

    return this;
}
    
function bindChangeEvent () {
        
    var _this            = this;
    var cm               = this.cm;
    var settings         = this.settings;
    
    if (!settings.syncScrolling) {
        return this;
    }
    
    cm.on("change", function(_cm, changeObj) {
        if (settings.watch) {
            _this.previewContainer.css("padding", settings.autoHeight ? "20px 20px 50px 40px" : "20px");
        }

        timer = setTimeout(function() {
            clearTimeout(timer);
            _this.save();
            timer = null;
        }, settings.delay);
    });

    return this;
}

/**
 * 显示编辑器
 * Show editor
 *
 * @param   {Function} [callback=function()] 回调函数
 * @returns {editormd}                       返回editormd的实例对象
 */

function show (callback) {
    callback  = callback || function () {};

    var _this = this;
    this.editor.show(0, function () {
        $.proxy(callback, _this)();
    });

    return this;
}

/**
 * 隐藏编辑器
 * Hide editor
 *
 * @param   {Function} [callback=function()] 回调函数
 * @returns {editormd}                       返回editormd的实例对象
 */

function hideEvent (callback) {
    callback  = callback || function () {};

    var _this = this;
    this.editor.hide(0, function () {
        $.proxy(callback, _this)();
    });

    return this;
}

class EditorMD {
    constructor (id, options) {
        this.initValue();
        this.init(id, options);
    }

    initValue () {
        this.state = {
            watching: false,
            loaded: false,
            preview: false,
            fullscreen: false
        };

        this.loadPlugins = {};
        this.loadFiles = {
            js: [],
            css: [],
            plugin: []
        };

        this.title        = this.$name = SettingDefault_2;
        this.version      = "1.5.0";
        this.homePage     = "https://pandao.github.io/editor.md/";
        this.classPrefix  = SettingDefault_1;

        this.toolbarModes = SettingDefault_4;
        this.mouseOrTouch = mouseOrTouch;
        this.loadedDisplay = loadedDisplay;
        this.save = editorSave;

        this.regexs = regexDefault;
        this.markedRenderer = markedRenderer;

        this.filterHTMLTags = filterHTMLTags;

        this.previewCodeHighlight = previewCodeHighlight;

        this.markdownToCRenderer = markdownToCRenderer;

        this.resize = resize;
        this.height = height;
        this.width = width;

        this.addKeyMap = addKeyMap;
        this.removeKeyMap = removeKeyMap;
        this.registerKeyMaps = registerKeyMaps;

        this.hide = hideEvent;
        this.show = show;
        this.off = off;
        this.on = on;
        this.bindChangeEvent = bindChangeEvent;
        this.bindScrollEvent = bindScrollEvent;
        this.recreate = recreateEvent;
    }

    init (id, options) {
        options = options || {};
        if (typeof id === 'object') {
            options = id;
        }
        // var classPrefix      = classPrefix;
        const settings = $.extend(true, {}, SettingDefault_3, options);

        if (options.imageFormats) {
            settings.imageFormats = options.imageFormats;
        }

        if (options.emojiCategories) {
            settings.emojiCategories = options.emojiCategories;
        }

        let editor;
        if (id instanceof HTMLElement) {
            const element = id;
            editor = this.editor = $(element);
            id = element.id.length > 0 ? element.id : settings.id;
        } else {
            id               = (typeof id === "object") ? settings.id : id;
            editor           = this.editor       = $("#" + id);
        }
        this.id              = id;
        this.lang            = settings.lang;

        var classNames       = this.classNames   = {
            textarea : {
                html     : `${SettingDefault_1}html-textarea`,
                markdown : `${SettingDefault_1}markdown-textarea`
            }
        };

        settings.pluginPath = (settings.pluginPath === '') ? settings.path + '../plugins/' : settings.pluginPath;
        this.state.watching = settings.watch;

        if (!editor.hasClass("editormd")) {
            editor.addClass("editormd");
        }

        editor.css({
            width  : (typeof settings.width  === "number") ? settings.width  + "px" : settings.width,
            height : (typeof settings.height === "number") ? settings.height + "px" : settings.height
        });

        if (settings.autoHeight) {
            editor.css("height", "auto");
        }

        var markdownTextarea = this.markdownTextarea = editor.children("textarea");

        if (markdownTextarea.length < 1) {
            editor.append("<textarea></textarea>");
            markdownTextarea = this.markdownTextarea = editor.children("textarea");
        }

        markdownTextarea.addClass(classNames.textarea.markdown).attr("placeholder", settings.placeholder);

        if (typeof markdownTextarea.attr("name") === "undefined" || markdownTextarea.attr("name") === "") {
            markdownTextarea.attr("name", (settings.name !== "") ? settings.name : id + "-markdown-doc");
        }

        var appendElements = [
            (!settings.readOnly) ? "<a href=\"javascript:;\" class=\"fa fa-close " + SettingDefault_1 + "preview-close-btn\"></a>" : "",
            ( (settings.saveHTMLToTextarea) ? "<textarea class=\"" + classNames.textarea.html + "\" name=\"" + id + "-html-code\"></textarea>" : "" ),
            "<div class=\"" + SettingDefault_1 + "preview\"><div class=\"markdown-body " + SettingDefault_1 + "preview-container\"></div></div>",
            "<div class=\"" + SettingDefault_1 + "container-mask\" style=\"display:block;\"></div>",
            "<div class=\"" + SettingDefault_1 + "mask\"></div>"
        ].join("\n");

        editor.append(appendElements).addClass(SettingDefault_1 + "vertical");

        if (settings.theme !== "") {
            editor.addClass(SettingDefault_1 + "theme-" + settings.theme);
        }

        this.mask          = editor.children("." + SettingDefault_1 + "mask");
        this.containerMask = editor.children("." + SettingDefault_1  + "container-mask");

        if (settings.markdown !== "") {
            markdownTextarea.val(settings.markdown);
        }

        if (settings.appendMarkdown !== "") {
            markdownTextarea.val(markdownTextarea.val() + settings.appendMarkdown);
        }

        this.htmlTextarea     = editor.children("." + classNames.textarea.html);
        this.preview          = editor.children("." + SettingDefault_1 + "preview");
        this.previewContainer = this.preview.children("." + SettingDefault_1 + "preview-container");

        if (settings.previewTheme !== "") {
            this.preview.addClass(SettingDefault_1 + "preview-theme-" + settings.previewTheme);
        }

        if (typeof define === "function" && define.amd) {
            if (typeof window.katex !== "undefined") {
                editormd.$katex = window.katex;
            }

            if (settings.searchReplace && !settings.readOnly) {
                editormd.loadCSS(settings.path + "codemirror/addon/dialog/dialog");
                editormd.loadCSS(settings.path + "codemirror/addon/search/matchesonscrollbar");
            }
        }

        editormd.settings = settings;
        this.settings = settings;

        if (
            (typeof define === "function" && define.amd) ||
            !settings.autoLoadModules)
        {
            if (typeof window.CodeMirror !== "undefined") {
                editormd.$CodeMirror = window.CodeMirror;
            }

            if (typeof window.marked !== "undefined") {
                editormd.$marked = window.marked;
            }

            this.setCodeMirror().setToolbar().loadedDisplay();
        } else {
            this.loadQueues();
        }

        // editorTheme.call(this);

        return this
    }
}

EditorMD.showToolbar = showToolbar;
EditorMD.prototype.hideToolbar = hideToolbar;
EditorMD.prototype.setToolbarAutoFixed = setToolbarAutoFixed;
EditorMD.prototype.setToolbar = setToolbar;
EditorMD.prototype.getToolbarHandles = getToolbarHandles;
EditorMD.prototype.setToolbarHandler = setToolbarHandler;

EditorMD.prototype.loadQueues = loadQueues;
EditorMD.prototype.loadCSS = loadCSS;
EditorMD.prototype.loadScript = loadScript;

EditorMD.prototype.setCodeMirrorTheme = setCodeMirrorTheme;
EditorMD.prototype.setCodeMirror = setCodeMirror;
EditorMD.prototype.getCodeMirrorOption = getCodeMirrorOption;
EditorMD.prototype.setCodeMirrorOption = setCodeMirrorOption;

EditorMD.prototype.trim = trimText;

function editormd$1 (id, options) {
    const test = new EditorMD(id, options);
    return test
}

export default editormd$1;
